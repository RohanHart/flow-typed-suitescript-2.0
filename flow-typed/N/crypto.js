/**
 * Flowtype definitions for crypto
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 * @flow strict
 */

declare module 'N/crypto' {

  import type { EncodingT } from 'N/encode';

  /**
   * Encapsulates a cipher.
   */
  declare interface Cipher {
    /**
     * Method used to return the cipher data. Sets the output encoding for the crypto.CipherPayload object.
     */
    final(options: FinalOptions): CipherPayload;

    /**
     * Method used to update the clear data with the specified encoding.
     */
    update(options: UpdateOptions): void;
  }
  /**
   * Encapsulates a cipher payload.
   */
  declare interface CipherPayload {
    /**
     * The result of the ciphering process. For example, to take the cipher payload and send it to another system.
     */
    ciphertext: string;

    /**
     * Initialization vector for the cipher payload. You can pass in the iv value to crypto.createDecipher(options).
     */
    iv: number;
  }
  /**
   * Encapsulates a decipher. This object has methods that decrypt.
   */
  declare interface Decipher {
    /**
     * Method used to return the clear data.
     */
    final(options: FinalOptions): string;

    /**
     * Method used to update decipher data with the specified encoding.
     */
    update(options: UpdateOptions): void;
  }
  declare interface Hash {
    /**
     * Calculates the digest of the data to be hashed.
     */
    digest(options: FinalOptions): string;

    /**
     * Method used to update hash data with the encoding specified.
     */
    update(options: UpdateOptions): void;
  }
  declare interface Hmac {
    /**
     * Calculates the digest of the data to be hashed. Default output encoding is HEX.
     */
    digest(options?: {
      outputEncoding: EncodingT,
      ...
    }): string;

    /**
     * Method used to update the hmac data with the encoding specified.
     */
    update(options: UpdateOptions): void;
  }
  declare interface SecretKey {
    /**
     * The GUID associated with the secret key.
     */
    guid: string;

    /**
     * The encoding used for the clear text value of the secret key.
     */
    encoding: string;
  }
  declare interface FinalOptions {
    /**
     * The output encoding for a crypto.CipherPayload object.
     */
    outputEncoding?: $Values<EncodingT>;
  }
  declare interface UpdateOptions {
    /**
     * The cipher data to be updated.
     */
    input: string;

    /**
     * The input encoding using encode.Encoding enum. Default: UTF_8.
     */
    inputEncoding?: EncodingT;
  }
  declare interface CreateCipherOptions {
    /**
     * The hash algorithm. Set the value using the crypto.EncryptionAlg enum.
     */
    algorithm: $Values<EncryptionAlgT>;

    /**
     * The crypto.SecretKey object. When using the crypto.SecretKey object for an AES algorithm, the length of the text (secret key) that is used to generate the GUID must be 16, 24, or 32 characters.
     */
    key: SecretKey;

    /**
     * The padding for the cipher. Set the value using the crypto.Padding enum. By default, the value is set to PKCS5Padding.
     */
    padding?: $Values<PaddingT>;
  }
  declare interface CreateDecipherOptions {
    /**
     * The hash algorithm. Set by the crypto.EncryptionAlg enum.
     */
    algorithm: $Values<EncryptionAlgT>;

    /**
     * The crypto.SecretKey object.
     */
    key: SecretKey;

    /**
     * The padding for the cipher. Set the value using the crypto.Padding enum.
     */
    padding?: $Values<PaddingT>;

    /**
     * The initialization vector that was used for encryption.
     */
    iv: string;
  }
  declare interface CreateHashOptions {
    /**
     * The hash algorithm. Set by the crypto.Hash enum. Default value is HEX.
     */
    algorithm: $Values<HashAlgT>;
  }
  declare interface CreateHmacOptions {
    /**
     * The hash algorithm. Set by the crypto.Hash enum.
     */
    algorithm: $Values<HashAlgT>;

    /**
     * The crypto.SecretKey object.
     */
    key: SecretKey;
  }
  declare interface CreateSecretKeyOptions {
    /**
     * A GUID used to generate a secret key. The GUID can resolve to either data or metadata.
     */
    guid: string;

    /**
     * Specifies the encoding for the SecureKey. Set this value using the encode.Encoding enum. The default value is HEX.
     */
    encoding?: EncodingT;
  }
  declare type EncryptionAlgT = {|
                                 +AES: 0 // 0
                                 |};

  declare type HashAlgT = {|
                           +SHA1: 0, // 0
                           +SHA256: 1, // 1
                           +SHA512: 2, // 2
                           +MD5: 3 // 3
                           |};

  declare type PaddingT = {|
                           +NoPadding: 0, // 0
                           +PKCS5Padding: 1 // 1
                           |};

  declare export interface NCrypto {
    /**
     * Method used to create and return a new crypto.EncryptionAlg object.
     * NOTE: we are NOT returning an EncryptionAlg, as it is not a real object. (5/9/2016)
     */
    createCipher(options: CreateCipherOptions): Cipher;

    /**
     * Method used to create a new crypto.Decipher object.
     */
    createDecipher(options: CreateDecipherOptions): Decipher;

    /**
     * Method used to create a new crypto.Hash object.
     */
    createHash(options?: CreateHashOptions): Hash;

    /**
     * Method used to create a new crypto.Hmac object.
     */
    createHmac(options: CreateHmacOptions): Hmac;

    /**
     * Method used to create a new crypto.SecretKey object.
     */
    createSecretKey(options: CreateSecretKeyOptions): SecretKey;

    EncryptionAlg: EncryptionAlgT;
    HashAlg: HashAlgT;
    Padding: PaddingT;
    Encoding: EncodingT;
  }

}
