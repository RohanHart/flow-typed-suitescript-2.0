/**
 * Flowtype definitions for query
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 * @flow
 */

declare module 'N/query' {

  declare interface RunMethodType {
    (): ResultSet;
    promise(): Promise<ResultSet>;
  }
  declare interface RunPagedMethodType {
    (options: {
      pageSize: number,
      ...
    }): PagedData;
    promise(options: {
      pageSize: number,
      ...
    }): Promise<PagedData>;
  }
  declare interface AutoJoinOptions {
    /**
     * The relationship field that will be used to determine the query type of the
     * newly joined component and also the columns on which the query types will be joined
     * together. For example "salesrep".
     */
    fieldId: string;
  }
  declare interface JoinOptions {
    /**
     * The column type (field type) that joins the parent component to the new component.
     * This value determines the columns on which the components are joined and the type of the newly joined component. For example "salesrep".
     */
    fieldId: string;
  }
  declare interface JoinToOptions {
    /**
     * The name of the relationship field on which join with other query type is performed For example "entity".
     */
    fieldId: string;

    /**
     * The target target of the join. It is the specialized query type with which is this component joined.
     */
    target: string;
  }
  declare interface JoinFromOptions {
    /**
     * The name of the relationship field on which join with other query type is performed For example "salesrep".
     */
    name: string;

    /**
     * The query type on which is relationship field used to create the join with this component
     */
    source: string;
  }
  declare type CreateConditionOptions = {|
    /**
     * Field (column) id
     */
    fieldId: string;

    /**
     * Use the Operator enum.
     */
    operator: $Values<OperatorT>;

    /**
     * Array of values
     */
    +values: string | string[];

    /**
     * Aggregate function. Use the Aggregate enum.
     */
    aggregate?: string;
  |} | {|
    /**
     * Field (column) id
     */
    fieldId: string;

    /**
     * Use the Operator enum.
     */
    operator: $Values<UniOperatorT>;

    /**
     * Aggregate function. Use the Aggregate enum.
     */
    aggregate?: string;
  |}
  declare type CreateConditionWithFormulaOptions = {|
    /**
     * Formula
     */
    formula: string;

    /**
     * Explicitly define value type in case it is not determined correctly from the formula. Use the ReturnType enum.
     */
    type?: string;

    /**
     * Aggregate function. Use the Aggregate enum.
     */
    aggregate?: string;
  |}
  declare interface CreateColumnOptions {
    /**
     * Field (column) id
     */
    fieldId: string;

    /**
     * Aggregate function. Use the Aggregate enum.
     */
    aggregate?: $Values<AggregateT>;

    /**
     * Indicates that we want the results grouped by this column; used together with aggregate function defined
     * on other columns.
     */
    groupBy?: boolean;
  }
  declare interface CreateColumnWithFormulaOptions {
    /**
     * Formula
     */
    formula: string;

    /**
     * Explicitly define value type in case it is not determined correctly from the formula. Use the ReturnType enum.
     */
    type?: $Values<ReturnTypeT>;

    /**
     * Aggregate function. Use the Aggregate enum.
     */
    aggregate?: $Values<AggregateT>;

    /**
     * Indicates that we want the results grouped by this column; used together with aggregate function defined
     * on other columns.
     */
    groupBy?: boolean;
  }
  declare interface CreateSortOptions {
    /**
     * The Column by which we want to sort.
     */
    column: Column;

    /**
     * The sort direction. True by default.
     */
    ascending?: boolean;

    /**
     * Where to put results with null value. Defaults to value of ascending flag
     */
    nullsLast?: boolean;
    caseSensitive?: boolean;
    locale?: $Values<SortLocaleT>;
  }
  declare interface CreateQueryOptions {
    /**
     * The query type. Use the Type enum.
     */
    type: string;
  }
  declare interface LoadQueryOptions {
    /**
     * Id of query to be loaded
     */
    id: number;
  }
  declare interface DeleteQueryOptions {
    /**
     * Id of query to be delete
     */
    id: number;
  }
  declare interface RunSuiteQLOptions {
    /**
     * String representation of SuiteQL query
     */
    query: string;
    +params?: Array<string | number | boolean>;
  }
  declare export interface Query {
    /**
     * Query type. Returns the query type given upon the creation of the query object.
     */
      +type: string;

    /**
     * Query condition.
     * @throws {SuiteScriptError} WRONG_PARAMETER_TYPE when setting value of different type than Query.Condition
     */
    condition: Condition;

    /**
     * Columns to be returned from the query.
     * @throws {SuiteScriptError} WRONG_PARAMETER_TYPE when setting value of different type than Query.Column array
     */
    columns: Column[];

    /**
     * Specifies how the results will be sorted.
     * @throws {SuiteScriptError} WRONG_PARAMETER_TYPE when setting value of different type than Query.Sort array
     */
    sort: Sort[];

    /**
     * Children of the root component of the query. It is an object with key/value pairs where key is the name of the
     * child component and value is the corresponding Component object.
     * This is a shortcut for the Query.root.child expression.
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
    +child: { [key: string]: any };

    /**
     * Id of this query, null if query is not saved
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +id: number;

    /**
     * Name of this query, null if query is not saved
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +name: string;

    /**
     * Access the root component of the query. It is the component that corresponds to the query type given upon the
     * creation of the whole Query object.
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +root: Component;

    /**
     * Execute the query and return results.
     * @governance 10 points
     */
      run: RunMethodType;

    /**
     * Execute the query and return paged results.
     * @governance 10 points
     */
      runPaged: RunPagedMethodType;

    /**
     * join the root component of the Query with another query type. This is a shortcut for Query.root.autoJoin.
     * @see Component.autoJoin
     */
    autoJoin(options: AutoJoinOptions): Component;

    /**
     * join the root component of the Query with another query type. This is a shortcut for Query.root.autoJoin.
     * @see Component.join
     */
    join(options: JoinOptions): Component;

    /**
     * join the root component of the Query with another (target) query type. This is a shortcut for Query.root.joinTo.
     * @see Component.joinTo
     */
    joinTo(options: JoinToOptions): Component;

    /**
     * join the root component of the Query with another (source) query type. This is a shortcut
     * for Query.root.joinFrom.
     * @see Component.joinFrom
     */
    joinFrom(options: JoinFromOptions): Component;

    /**
     * Create a Condition object based on the root component of the Query. This is a shortcut
     * for Query.root.createCondition.
     * @see Component.createCondition
     */
    createCondition(
      options: CreateConditionOptions | CreateConditionWithFormulaOptions
    ): Condition;

    /**
     * Create a Column object based on the root component of the Query. This is a shortcut for Query.root.createColumn.
     * @see Component.createColumn
     */
    createColumn(options: CreateColumnOptions): Column;

    /**
     * Create a Sort object based on the root component of the Query. This is a shortcut for Query.root.createSort.
     * @see Component.createSort
     */
    createSort(options: CreateSortOptions): Sort;

    /**
     * Create a new Condition object that corresponds to a logical conjunction (AND) of the Condition objects given to
     * the method as arguments. The arguments must be one or more Condition objects.
     */
    and(...conditions: Condition[]): Condition;

    /**
     * Create a new Condition object that corresponds to a logical disjunction (OR) of the Condition objects given to
     * the method as arguments. The arguments must be one or more Condition objects.
     */
    or(...conditions: Condition[]): Condition;

    /**
     * Create a new Condition object that corresponds to a logical negation (NOT) of the Condition object given
     * to the method as argument.
     */
    not(condition: Condition): Condition;

    /**
     * Returns the object type name.
     */
    toString(): string;

    /**
     * JSON.stringify() implementation.
     */
    toJSON(): { [key: string]: any };
  }
  /**
   * One component of the query definition. The Query object always contains at least one Component object called
   * the root component. Queries with multi-level joins contain multiple Component objects linked together into
   * a parent/child hierarchy.
   */
  declare export interface Component {
    /**
     * Query type. Returns the query type of this component.
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +type: string;

    /**
     * Inverse target. Returns the source query type from which is this component joined.
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +source: string;

    /**
     * Polymorphic target. Returns the target target of this component.
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +target: string;

    /**
     * Returns the Component that corresponds to the ancestor of this component in the query object model.
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +parent: string;

    /**
     * Children of this component. It is an object with key/value pairs where key is the name of the child component
     * and value is the corresponding Component object.
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
    +child: { [key: string]: any };

    /**
     * join this component with another query type. A new component corresponding to the given relationship is created
     * and joined with this one.
     * @throws {SuiteScriptError} MISSING_REQD_ARGUMENT if fieldId is undefined
     * @throws {SuiteScriptError} RELATIONSHIP_ALREADY_USED if relationship is already used
     */
    autoJoin(options: AutoJoinOptions): Component;

    /**
     * join this component with another query type. A new component corresponding to the given relationship is created
     * and joined with this one.
     * @throws {SuiteScriptError} MISSING_REQD_ARGUMENT if name is undefined
     * @throws {SuiteScriptError} RELATIONSHIP_ALREADY_USED if relationship is already used
     */
    join(options: JoinOptions): Component;

    /**
     * join this component with another query type. A new component corresponding to the given relationship is created
     * and joined with this one.
     * @throws {SuiteScriptError} MISSING_REQD_ARGUMENT if relationship is undefined
     * @throws {SuiteScriptError} RELATIONSHIP_ALREADY_USED if relationship is already used
     */
    joinTo(options: JoinToOptions): Component;

    /**
     * join this component with another query type. A new component corresponding to the given relationship is created
     * and joined with this one.
     * @throws {SuiteScriptError} MISSING_REQD_ARGUMENT if relationship is undefined
     * @throws {SuiteScriptError} RELATIONSHIP_ALREADY_USED if relationship is already used
     */
    joinFrom(options: JoinFromOptions): Component;

    /**
     * Create a Condition object based on this query component. Use either fieldId + operator + values or
     * formula + (optional) type.
     * @throws {SuiteScriptError} MISSING_REQD_ARGUMENT if options are undefined
     * @throws {SuiteScriptError} WRONG_PARAMETER_TYPE if options isn't object
     * @throws {SuiteScriptError} OPERATOR_ARITY_MISMATCH if requested operator cannot work with specified number of
     *                                            arguments
     * @throws {SuiteScriptError} INVALID_SEARCH_OPERATOR if wrong query operator is used
     */
    createCondition(
      options: CreateConditionOptions | CreateConditionWithFormulaOptions
    ): Condition;

    /**
     * Create a Column object based on this query component. Use either name or formula + (optional) type.
     * @throws {SuiteScriptError} MISSING_REQD_ARGUMENT if options are undefined
     * @throws {SuiteScriptError} WRONG_PARAMETER_TYPE if options isn't object
     * @throws {SuiteScriptError} MUTUALLY_EXCLUSIVE_ARGUMENTS when two mutually arguments are defined
     * @throws {SuiteScriptError} NEITHER_ARGUMENT_DEFINED when neither of two mandatory arguments is defined
     */
    createColumn(
      options: CreateColumnOptions | CreateColumnWithFormulaOptions
    ): Column;

    /**
     * Create a Sort object based on this query component.
     */
    createSort(options: CreateSortOptions): Sort;
  }
  /**
   * Specifies a return column.
   */
  declare export interface Column {
    /**
     * Id of column field.
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +prototype: string;

    /**
     * Query component. Returns the Component to which this column belongs.
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +component: Component;

    /**
     * Formula.
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +formula: string;

    /**
     * Desired value type of the formula (if it was explicitly stated upon Column creation).
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +type: string;

    /**
     * Aggregate function (value from Aggregate enum).
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +aggregate: string;

    /**
     * The group-by flag.
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +groupBy: boolean;
  }
  /**
   * Specifies sorting by the values of a given column and the sort direction.
   */
  declare export interface Sort {
    /**
     * The query column by which we want to sort.
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +column: Column;

    /**
     * Flag indicating if sort is ascending
     * @throws {SuiteScriptError} WRONG_PARAMETER_TYPE when setting wrong sort order is attempted
     */
    ascending: boolean;

    /**
     * Sort case sensitivity.
     * @throws {SuiteScriptError} WRONG_PARAMETER_TYPE when setting non-boolean parameter
     */
    caseSensitive: boolean;

    /**
     * Flag indicating where results with null value should be sorted
     * @throws {SuiteScriptError} WRONG_PARAMETER_TYPE when setting non-boolean parameter
     */
    nullsLast: boolean;

    /**
     * Sort locale
     * @throws {SuiteScriptError} WRONG_PARAMETER_TYPE when setting non-boolean parameter
     */
    locale: string;
  }
  /**
   * Specifies the condition used to filter the results. It can consist of other Condition objects.
   */
  declare export interface Condition {
    /**
     * This is only applicable to "non-leaf" conditions that were created by AND-ing, OR-ing or NOT-ing other
     * Condition objects. In such case this property holds the child Component objects that are arguments of the
     * logical operation.
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +children: Condition[];

    /**
     * Field id. This is only applicable to "leaf" conditions (equivalent to the former Filter).
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +fieldId: string;

    /**
     * Operator. This is only applicable to "leaf" conditions (equivalent to the former Filter).
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +operator: $Values<OperatorT & UniOperatorT>;

    /**
     * Values. This is only applicable to "leaf" conditions (equivalent to the former Filter).
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +values: string[];

    /**
     * Formula. This is only applicable to "leaf" conditions (equivalent to the former Filter).
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +formula: string;

    /**
     * Return type of the formula, if explicitly specified. This is only applicable to "leaf" conditions
     * (equivalent to the former Filter). (values from the ReturnType enum)
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +type: string;

    /**
     * Aggregate function. This is only applicable to "leaf" conditions (equivalent to the former Filter).
     * (values from the Aggregate enum)
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +aggregate: string;

    /**
     * Query component to which this condition belongs. This is only applicable to "leaf" conditions (equivalent to the
     * former Filter).
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +component: Component;
  }
  /**
   * Set of results returned by the query.
   */
  declare export interface ResultSet {
    /**
     * The actual query results.
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +results: Result[];

    /**
     * The types of the return values. Array of values from the ReturnType enum. Number and order of values in the array
     * exactly matches the ResultSet.columns property.
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +types: string[];

    /**
     * The return columns.
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +columns: Column[];

    /**
     * Standard object for iterating through results.
     * @governance 10 points for each page returned
     */
    iterator(): Iterator;
  }
  /**
   * Corresponds to a single row of the ResultSet.
   */
  declare export interface Result {
    /**
     * The result values. Value types correspond to the ResultSet.types property. Number and order of values in
     * the array exactly matches the ResultSet.types, ResultSet.columns or Result.columns property.
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +values: Array<string | number | null>;

    /**
     * The return columns. This is equivalent to ResultSet.columns.
     * @throws {SuiteScriptError} READ_ONLY when setting the property is attempted
     */
      +columns: Column[];

    /**
     * Returns the query result as a mapped result. A mapped result is a JavaScript object with key-value pairs. In this
     * object, the key is either the field ID or the alias that was used for the corresponding query.Column object.
     */
    asMap(): {[key: string]: string | number | null};
  }
  /**
   * One page of the paged query results.
   * @since 2018.1
   */
  declare export interface Page {
    /**
     * References the query results contained in this page.
     */
      +data: ResultSet;

    /**
     * Indicates whether this page is the first of the paged query results.
     */
      +isFirst: boolean;

    /**
     * Indicates whether this page is the last of the paged query results.
     */
      +isLast: boolean;

    /**
     * References the set of paged query results that this page is from.
     */
      +pagedData: PagedData;

    /**
     * The range of query results for this page.
     */
      +pageRange: PageRange;
  }
  /**
   * Encapsulates a set of paged query results. This object also contains information about the set of paged results
   * it encapsulates.
   */
  declare export interface PagedData {
    /**
     * Describes the total number of paged query results.
     */
      +count: number;

    /**
     * Holds an array of page ranges for the set of paged query results.
     */
      +pageRanges: PageRange[];

    /**
     * Describes the number of query result rows per page.
     */
      +pageSize: number;

    /**
     * Standard SuiteScript 2.0 object for iterating through results.
     */
    iterator(): Iterator;
    fetch(index: number): Page;
  }
  /**
   * Encapsulates the range of query results for a page.
   */
  declare export interface PageRange {
    /**
     * Describes the array index for this page range.
     */
      +index: number;

    /**
     * Describes the number of query result rows in this page range.
     */
      +size: number;
  }
  declare export interface Iterator {
    each(f: (result: Result) => boolean): void;
  }

  declare type UniOperatorT = {|
                               +EMPTY: "EMPTY", // "EMPTY"
                               +EMPTY_NOT: "EMPTY_NOT", // "EMPTY_NOT"
                               |};

  declare type OperatorT = {|
                            +AFTER: "AFTER", // "AFTER"
                            +AFTER_NOT: "AFTER_NOT", // "AFTER_NOT"
                            +ANY_OF: "ANY_OF", // "ANY_OF"
                            +ANY_OF_NOT: "ANY_OF_NOT", // "ANY_OF_NOT"
                            +BEFORE: "BEFORE", // "BEFORE"
                            +BEFORE_NOT: "BEFORE_NOT", // "BEFORE_NOT"
                            +BETWEEN: "BETWEEN", // "BETWEEN"
                            +BETWEEN_NOT: "BETWEEN_NOT", // "BETWEEN_NOT"
                            +CONTAIN: "CONTAIN", // "CONTAIN"
                            +CONTAIN_NOT: "CONTAIN_NOT", // "CONTAIN_NOT"
                            +ENDWITH: "ENDWITH", // "ENDWITH"
                            +ENDWITH_NOT: "ENDWITH_NOT", // "ENDWITH_NOT"
                            +EQUAL: "EQUAL", // "EQUAL"
                            +EQUAL_NOT: "EQUAL_NOT", // "EQUAL_NOT"
                            +GREATER: "GREATER", // "GREATER"
                            +GREATER_NOT: "GREATER_NOT", // "GREATER_NOT"
                            +GREATER_OR_EQUAL: "GREATER_OR_EQUAL", // "GREATER_OR_EQUAL"
                            +GREATER_OR_EQUAL_NOT: "GREATER_OR_EQUAL_NOT", // "GREATER_OR_EQUAL_NOT"
                            +IS: "IS", // "IS"
                            +IS_NOT: "IS_NOT", // "IS_NOT"
                            +LESS: "LESS", // "LESS"
                            +LESS_NOT: "LESS_NOT", // "LESS_NOT"
                            +LESS_OR_EQUAL: "LESS_OR_EQUAL", // "LESS_OR_EQUAL"
                            +LESS_OR_EQUAL_NOT: "LESS_OR_EQUAL_NOT", // "LESS_OR_EQUAL_NOT"
                            +ON: "ON", // "ON"
                            +ON_NOT: "ON_NOT", // "ON_NOT"
                            +ON_OR_AFTER: "ON_OR_AFTER", // "ON_OR_AFTER"
                            +ON_OR_AFTER_NOT: "ON_OR_AFTER_NOT", // "ON_OR_AFTER_NOT"
                            +ON_OR_BEFORE: "ON_OR_BEFORE", // "ON_OR_BEFORE"
                            +ON_OR_BEFORE_NOT: "ON_OR_BEFORE_NOT", // "ON_OR_BEFORE_NOT"
                            +START_WITH: "START_WITH", // "START_WITH"
                            +START_WITH_NOT: "START_WITH_NOT", // "START_WITH_NOT"
                            +WITHIN: "WITHIN", // "WITHIN"
                            +WITHIN_NOT: "WITHIN_NOT" // "WITHIN_NOT"
                            |};

  declare type TypeT = {|
                        +ACCOUNT: "account", // "account"
                        +ACCOUNTING_CONTEXT: "accountingcontext", // "accountingcontext"
                        +ACCOUNTING_PERIOD: "accountingperiod", // "accountingperiod"
                        +ADVANCED_REV_REC_PLUGIN: "advancedrevrecplugin", // "advancedrevrecplugin"
                        +ADV_INTERCOMPANY_JOURNAL_ENTRY: "advintercompanyjournalentry", // "advintercompanyjournalentry"
                        +ALLOCATION_METHOD: "allocationmethod", // "allocationmethod"
                        +AMORTIZATION_SCHEDULE: "amortizationschedule", // "amortizationschedule"
                        +AMORTIZATION_TEMPLATE: "amortizationtemplate", // "amortizationtemplate"
                        +ANOTHER_HIERARCHY_RECORD: "anotherhierarchyrecord", // "anotherhierarchyrecord"
                        +BANK_CONNECTIVITY_PLUGIN: "bankconnectivityplugin", // "bankconnectivityplugin"
                        +BILLING_CLASS: "billingclass", // "billingclass"
                        +BILLING_SCHEDULE: "billingschedule", // "billingschedule"
                        +BRANCHRECORD: "branchrecord", // "branchrecord"
                        +BUDGETCATEGORY: "budgetcategory", // "budgetcategory"
                        +BUDGETEXCHANGERATE: "budgetexchangerate", // "budgetexchangerate"
                        +BUDGETIMPORT: "budgetimport", // "budgetimport"
                        +BUDGETS: "budgets", // "budgets"
                        +BULK_PROC_SUBMISSION: "bulkprocsubmission", // "bulkprocsubmission"
                        +BUNDLE_INSTALLATION_SCRIPT: "bundleinstallationscript", // "bundleinstallationscript"
                        +BUNDLE_INSTALLATION_SCRIPT_DEPLOYMENT: "bundleinstallationscriptdeployment", // "bundleinstallationscriptdeployment"
                        +BUYING_REASON: "buyingreason", // "buyingreason"
                        +BUYING_TIME_FRAME: "buyingtimeframe", // "buyingtimeframe"
                        +CALENDAR_EVENT: "calendarevent", // "calendarevent"
                        +CAMPAIGN_AUDIENCE: "campaignaudience", // "campaignaudience"
                        +CAMPAIGN_CATEGORY: "campaigncategory", // "campaigncategory"
                        +CAMPAIGN_CHANNEL: "campaignchannel", // "campaignchannel"
                        +CAMPAIGN_EMAIL_ADDRESS: "campaignemailaddress", // "campaignemailaddress"
                        +CAMPAIGN_EVENT: "campaignevent", // "campaignevent"
                        +CAMPAIGN_FAMILY: "campaignfamily", // "campaignfamily"
                        +CAMPAIGN_OFFER: "campaignoffer", // "campaignoffer"
                        +CAMPAIGN_RESPONSE: "campaignresponse", // "campaignresponse"
                        +CAMPAIGN_SEARCH_ENGINE: "campaignsearchengine", // "campaignsearchengine"
                        +CAMPAIGN_TEMPLATE: "campaigntemplate", // "campaigntemplate"
                        +CAMPAIGN_VERTICAL: "campaignvertical", // "campaignvertical"
                        +CASE_PROFILE: "caseprofile", // "caseprofile"
                        +CASH_REFUND: "cashrefund", // "cashrefund"
                        +CASH_SALE: "cashsale", // "cashsale"
                        +CATEGORY1099MISC: "category1099misc", // "category1099misc"
                        +CHECK: "check", // "check"
                        +CLASSIFICATION: "classification", // "classification"
                        +CLIENT_SCRIPT: "clientscript", // "clientscript"
                        +CLIENT_SCRIPT_DEPLOYMENT: "clientscriptdeployment", // "clientscriptdeployment"
                        +CLOB_RECORD: "clobrecord", // "clobrecord"
                        +COMPANY: "company", // "company"
                        +COMPETITOR: "competitor", // "competitor"
                        +COMPOSITE_KEY_SOURCE_RECORD: "compositekeysourcerecord", // "compositekeysourcerecord"
                        +COMPOSITE_RECORD: "compositerecord", // "compositerecord"
                        +CONSOLIDATEDEXCHANGERATE: "consolidatedexchangerate", // "consolidatedexchangerate"
                        +CONSOLIDATEDEXCHANGERATEINTERNAL: "consolidatedexchangerateinternal", // "consolidatedexchangerateinternal"
                        +CONSOLIDATED_RATE_ADJUSTOR_PLUGIN: "consolidatedrateadjustorplugin", // "consolidatedrateadjustorplugin"
                        +CONSOLIDATION_ACCOUNT: "consolidationaccount", // "consolidationaccount"
                        +CONSOLIDATION_ACCOUNT_TYPE: "consolidationaccounttype", // "consolidationaccounttype"
                        +CONSOLIDATION_BUDGET_RATE: "consolidationbudgetrate", // "consolidationbudgetrate"
                        +CONSOLIDATION_CURRENCY: "consolidationcurrency", // "consolidationcurrency"
                        +CONSOLIDATION_RATE: "consolidationrate", // "consolidationrate"
                        +CONSOLIDATION_SUBSIDIARY: "consolidationsubsidiary", // "consolidationsubsidiary"
                        +CONSOLIDATION_TRANSACTION: "consolidationtransaction", // "consolidationtransaction"
                        +CONSUMER_SPECIFIC_RECORD_TYPE: "consumerspecificrecordtype", // "consumerspecificrecordtype"
                        +CONTACT: "contact", // "contact"
                        +CONTACT_CATEGORY: "contactcategory", // "contactcategory"
                        +CONTACT_ROLE: "contactrole", // "contactrole"
                        +COUPON_CODE: "couponcode", // "couponcode"
                        +COURSE_RECORD: "courserecord", // "courserecord"
                        +CREDIT_CARDS: "creditcards", // "creditcards"
                        +CREDIT_CARD_CHARGE: "creditcardcharge", // "creditcardcharge"
                        +CREDIT_CARD_REFUND: "creditcardrefund", // "creditcardrefund"
                        +CREDIT_MEMO: "creditmemo", // "creditmemo"
                        +CRM_TEMPLATE: "crmtemplate", // "crmtemplate"
                        +CRM_TEMPLATE_CATEGORY: "crmtemplatecategory", // "crmtemplatecategory"
                        +CURRENCY: "currency", // "currency"
                        +CURRENCY_FIELD_RECORD: "currencyfieldrecord", // "currencyfieldrecord"
                        +CURRENCY_FIELD_TYPE: "currencyfieldtype", // "currencyfieldtype"
                        +CURRENCY_RATE: "currencyrate", // "currencyrate"
                        +CUSTOM: "custom", // "custom"
                        +CUSTOMER: "customer", // "customer"
                        +CUSTOMER_CATEGORY: "customercategory", // "customercategory"
                        +CUSTOMER_CHARGE: "customercharge", // "customercharge"
                        +CUSTOMER_DEPOSIT: "customerdeposit", // "customerdeposit"
                        +CUSTOMER_MESSAGE: "customermessage", // "customermessage"
                        +CUSTOMER_PAYMENT: "customerpayment", // "customerpayment"
                        +CUSTOMER_REFUND: "customerrefund", // "customerrefund"
                        +CUSTOMER_STATUS: "customerstatus", // "customerstatus"
                        +CUSTOMRECORD1: "customrecord1", // "customrecord1"
                        +CUSTOM_GL_PLUGIN: "customglplugin", // "customglplugin"
                        +CUSTOM_LIST: "customlist", // "customlist"
                        +CUSTOM_RECORD_TYPE: "customrecordtype", // "customrecordtype"
                        +DATE_FIELD_TYPE: "datefieldtype", // "datefieldtype"
                        +DATE_RECORD: "daterecord", // "daterecord"
                        +DATE_TIME_RECORD: "datetimerecord", // "datetimerecord"
                        +DATE_TIME_ZONE: "datetimezone", // "datetimezone"
                        +DEFAULTING_PORTED_RECORD: "defaultingportedrecord", // "defaultingportedrecord"
                        +DEF_VIEW_TEST_RECORD: "defviewtestrecord", // "defviewtestrecord"
                        +DELETED_RECORD: "deletedrecord", // "deletedrecord"
                        +DEPARTMENT: "department", // "department"
                        +DEPOSIT: "deposit", // "deposit"
                        +DEPOSIT_APPLICATION: "depositapplication", // "depositapplication"
                        +DESCRIPTION_ITEM: "descriptionitem", // "descriptionitem"
                        +DEVICE_ID: "deviceid", // "deviceid"
                        +DISABLEDCHANNELFORMTESTRECORD: "disabledchannelformtestrecord", // "disabledchannelformtestrecord"
                        +DISCOUNT_ITEM: "discountitem", // "discountitem"
                        +DISPLAY_INACTIVE_TEST_RECORD: "displayinactivetestrecord", // "displayinactivetestrecord"
                        +DOMAIN: "domain", // "domain"
                        +DOWNLOAD_ITEM: "downloaditem", // "downloaditem"
                        +DURATION_RECORD: "durationrecord", // "durationrecord"
                        +EMAIL_CAPTURE_PLUGIN: "emailcaptureplugin", // "emailcaptureplugin"
                        +EMAIL_TEMPLATE: "emailtemplate", // "emailtemplate"
                        +EMPLOYEE: "employee", // "employee"
                        +EMPLOYEE_LIST: "employeelist", // "employeelist"
                        +EMPLOYEE_STATUS: "employeestatus", // "employeestatus"
                        +END_TO_END_TIME: "endtoendtime", // "endtoendtime"
                        +ENTITY: "entity", // "entity"
                        +ENTITY_GROUP: "entitygroup", // "entitygroup"
                        +ESCALATION_TERRITORY: "escalationterritory", // "escalationterritory"
                        +ESTIMATE: "estimate", // "estimate"
                        +EXAMPLE_TRANSACTION: "exampletransaction", // "exampletransaction"
                        +EXPENSE_CATEGORY: "expensecategory", // "expensecategory"
                        +EXPENSE_REPORT: "expensereport", // "expensereport"
                        +EXPOSURENOTLIMITEDRECORD: "exposurenotlimitedrecord", // "exposurenotlimitedrecord"
                        +FACULTYRECORD: "facultyrecord", // "facultyrecord"
                        +FAX_TEMPLATE: "faxtemplate", // "faxtemplate"
                        +FIELD_LABEL: "fieldlabel", // "fieldlabel"
                        +FILE: "file", // "file"
                        +FLOAT_NUMBERS_TEST_RECORD: "floatnumberstestrecord", // "floatnumberstestrecord"
                        +FORECAST: "forecast", // "forecast"
                        +FORMULA_POLYMORPHIC_RECORD: "formulapolymorphicrecord", // "formulapolymorphicrecord"
                        +FORMULA_RECORD: "formularecord", // "formularecord"
                        +FULFILLMENT_EXCEPTION_REASON: "fulfillmentexceptionreason", // "fulfillmentexceptionreason"
                        +FX_REVAL: "fxreval", // "fxreval"
                        +GATEWAY_NOTIFICATION: "gatewaynotification", // "gatewaynotification"
                        +GENERAL_ALLOCATION_SCHEDULE: "generalallocationschedule", // "generalallocationschedule"
                        +GENERIC_RESOURCE: "genericresource", // "genericresource"
                        +GENERIC_TEST_RECORD: "generictestrecord", // "generictestrecord"
                        +GIFT_CERTIFICATE: "giftcertificate", // "giftcertificate"
                        +GIFT_CERTIFICATE_ITEM: "giftcertificateitem", // "giftcertificateitem"
                        +HIERARCHY_RECORD: "hierarchyrecord", // "hierarchyrecord"
                        +HYBRID_RECORD_LOG: "hybridrecordlog", // "hybridrecordlog"
                        +INCOTERM: "incoterm", // "incoterm"
                        +INTEGRATION_APP: "integrationapp", // "integrationapp"
                        +INTERNAL_ID_TEST_RECORD: "internalidtestrecord", // "internalidtestrecord"
                        +INVENTORY_ADJUSTMENT: "inventoryadjustment", // "inventoryadjustment"
                        +INVENTORY_DISTRIBUTION: "inventorydistribution", // "inventorydistribution"
                        +INVENTORY_ITEM: "inventoryitem", // "inventoryitem"
                        +INVENTORY_TRANSFER: "inventorytransfer", // "inventorytransfer"
                        +INVENTORY_WORKSHEET: "inventoryworksheet", // "inventoryworksheet"
                        +INVOICE: "invoice", // "invoice"
                        +INVT_ITEM_PRICE_HISTORY: "invtitempricehistory", // "invtitempricehistory"
                        +ISSUE: "issue", // "issue"
                        +ISSUE_EXTERNAL_STATUS: "issueexternalstatus", // "issueexternalstatus"
                        +ISSUE_PRIORITY: "issuepriority", // "issuepriority"
                        +ISSUE_PRODUCT: "issueproduct", // "issueproduct"
                        +ISSUE_REPRODUCIBILITY: "issuereproducibility", // "issuereproducibility"
                        +ISSUE_ROLE: "issuerole", // "issuerole"
                        +ISSUE_SEVERITY: "issueseverity", // "issueseverity"
                        +ISSUE_SOURCE: "issuesource", // "issuesource"
                        +ISSUE_STATUS: "issuestatus", // "issuestatus"
                        +ISSUE_TAG: "issuetag", // "issuetag"
                        +ISSUE_TRACK_CODE: "issuetrackcode", // "issuetrackcode"
                        +ISSUE_TYPE: "issuetype", // "issuetype"
                        +ITEM: "item", // "item"
                        +ITEM_FULFILLMENT: "itemfulfillment", // "itemfulfillment"
                        +ITEM_GROUP: "itemgroup", // "itemgroup"
                        +ITEM_RECEIPT: "itemreceipt", // "itemreceipt"
                        +I_P_RESTRICTIONS: "iprestrictions", // "iprestrictions"
                        +JOB: "job", // "job"
                        +JOB_RESOURCE_ROLE: "jobresourcerole", // "jobresourcerole"
                        +JOB_STATUS: "jobstatus", // "jobstatus"
                        +JOB_TYPE: "jobtype", // "jobtype"
                        +JOURNAL: "journal", // "journal"
                        +KIT_ITEM: "kititem", // "kititem"
                        +KNOWLEDGE_BASE: "knowledgebase", // "knowledgebase"
                        +LOCATION: "location", // "location"
                        +LOCATION_COSTING_GROUP: "locationcostinggroup", // "locationcostinggroup"
                        +LOGIN_AUDIT: "loginaudit", // "loginaudit"
                        +MAIL_TEMPLATE: "mailtemplate", // "mailtemplate"
                        +MAP_REDUCE_SCRIPT: "mapreducescript", // "mapreducescript"
                        +MAP_REDUCE_SCRIPT_DEPLOYMENT: "mapreducescriptdeployment", // "mapreducescriptdeployment"
                        +MARKUP_ITEM: "markupitem", // "markupitem"
                        +MASS_UPDATE_SCRIPT: "massupdatescript", // "massupdatescript"
                        +MASS_UPDATE_SCRIPT_DEPLOYMENT: "massupdatescriptdeployment", // "massupdatescriptdeployment"
                        +MATERIALIZED_HIERARCHY_RECORD: "materializedhierarchyrecord", // "materializedhierarchyrecord"
                        +MEDIA_ITEM_FOLDER: "mediaitemfolder", // "mediaitemfolder"
                        +MEM_DOC: "memdoc", // "memdoc"
                        +MEM_DOC_TRANSACTION_TEMPLATE: "memdoctransactiontemplate", // "memdoctransactiontemplate"
                        +MESSAGE: "message", // "message"
                        +NAMED_GROUP_RECORD: "namedgrouprecord", // "namedgrouprecord"
                        +NEXUS: "nexus", // "nexus"
                        +NON_INVENTORY_PURCHASE_ITEM: "noninventorypurchaseitem", // "noninventorypurchaseitem"
                        +NON_INVENTORY_RESALE_ITEM: "noninventoryresaleitem", // "noninventoryresaleitem"
                        +NON_INVENTORY_SALE_ITEM: "noninventorysaleitem", // "noninventorysaleitem"
                        +NOTE: "note", // "note"
                        +NOTE_TYPE: "notetype", // "notetype"
                        +NUMERIC_RECORD: "numericrecord", // "numericrecord"
                        +ONLINE_CASE_FORM: "onlinecaseform", // "onlinecaseform"
                        +ONLINE_FORM_TEMPLATE: "onlineformtemplate", // "onlineformtemplate"
                        +ONLINE_LEAD_FORM: "onlineleadform", // "onlineleadform"
                        +OPPORTUNITY: "opportunity", // "opportunity"
                        +OTHER_CHARGE_PURCHASE_ITEM: "otherchargepurchaseitem", // "otherchargepurchaseitem"
                        +OTHER_CHARGE_RESALE_ITEM: "otherchargeresaleitem", // "otherchargeresaleitem"
                        +OTHER_CHARGE_SALE_ITEM: "otherchargesaleitem", // "otherchargesaleitem"
                        +OTHER_NAME: "othername", // "othername"
                        +OTHER_NAME_CATEGORY: "othernamecategory", // "othernamecategory"
                        +PAGE: "page", // "page"
                        +PAGINATION_RECORD: "paginationrecord", // "paginationrecord"
                        +PARTNER: "partner", // "partner"
                        +PARTNER_CATEGORY: "partnercategory", // "partnercategory"
                        +PAYCHECK: "paycheck", // "paycheck"
                        +PAYMENT_EVENT: "paymentevent", // "paymentevent"
                        +PAYMENT_GATEWAY_PLUGIN: "paymentgatewayplugin", // "paymentgatewayplugin"
                        +PAYMENT_ITEM: "paymentitem", // "paymentitem"
                        +PAYMENT_METHOD: "paymentmethod", // "paymentmethod"
                        +PAYMENT_PROCESSING_PROFILE: "paymentprocessingprofile", // "paymentprocessingprofile"
                        +PAYROLL_ITEM: "payrollitem", // "payrollitem"
                        +PDF_TEMPLATE: "pdftemplate", // "pdftemplate"
                        +PERSISTED_RECORD: "persistedrecord", // "persistedrecord"
                        +PERSISTED_RECORD_FULL_JOIN: "persistedrecordfulljoin", // "persistedrecordfulljoin"
                        +PERSISTED_RECORD_INVALID_TABLE: "persistedrecordinvalidtable", // "persistedrecordinvalidtable"
                        +PERSISTED_RECORD_NO_CREATE: "persistedrecordnocreate", // "persistedrecordnocreate"
                        +PERSISTED_RECORD_NO_DELETE: "persistedrecordnodelete", // "persistedrecordnodelete"
                        +PERSISTED_RECORD_NO_EDIT: "persistedrecordnoedit", // "persistedrecordnoedit"
                        +PERSISTED_RECORD_NO_LOAD: "persistedrecordnoload", // "persistedrecordnoload"
                        +PERSISTED_RECORD_RIGHT_JOIN: "persistedrecordrightjoin", // "persistedrecordrightjoin"
                        +PERSISTED_RECORD_SIMPLE_OPTIONS: "persistedrecordsimpleoptions", // "persistedrecordsimpleoptions"
                        +PERSISTED_RECORD_U_Q_KEY_REF: "persistedrecorduqkeyref", // "persistedrecorduqkeyref"
                        +PERSISTED_RECORD_U_Q_KEY_REF_TYPE: "persistedrecorduqkeyreftype", // "persistedrecorduqkeyreftype"
                        +PHONE_CALL: "phonecall", // "phonecall"
                        +PLUG_IN_TYPE: "plugintype", // "plugintype"
                        +PLUG_IN_TYPE_IMPL: "plugintypeimpl", // "plugintypeimpl"
                        +PORTLET: "portlet", // "portlet"
                        +PORTLET_DEPLOYMENT: "portletdeployment", // "portletdeployment"
                        +PRICE_LEVEL: "pricelevel", // "pricelevel"
                        +PRICING: "pricing", // "pricing"
                        +PRICING_GROUP: "pricinggroup", // "pricinggroup"
                        +PRIMARY_RECORD: "primaryrecord", // "primaryrecord"
                        +PROJECT_TASK: "projecttask", // "projecttask"
                        +PROJECT_TEMPLATE: "projecttemplate", // "projecttemplate"
                        +PROMOTIONS_PLUGIN: "promotionsplugin", // "promotionsplugin"
                        +PROMOTION_CODE: "promotioncode", // "promotioncode"
                        +PUBLISHED_SAVED_SEARCH: "publishedsavedsearch", // "publishedsavedsearch"
                        +PURCHASE_ORDER: "purchaseorder", // "purchaseorder"
                        +PURCHASE_REQUISITION: "purchaserequisition", // "purchaserequisition"
                        +QUANTITY_PRICING_SCHEDULE: "quantitypricingschedule", // "quantitypricingschedule"
                        +QUOTA: "quota", // "quota"
                        +RECENT_RECORD: "recentrecord", // "recentrecord"
                        +RECORD_SERVICE_TEST_RECORD: "recordservicetestrecord", // "recordservicetestrecord"
                        +RECORD_TYPE: "recordtype", // "recordtype"
                        +RECORD_WITH_HIERARCHY_RELATIONSHIP: "recordwithhierarchyrelationship", // "recordwithhierarchyrelationship"
                        +REDIRECT: "redirect", // "redirect"
                        +REGION: "region", // "region"
                        +RELATIONSHIP_DISPLAY_INACTIVE: "relationshipdisplayinactive", // "relationshipdisplayinactive"
                        +RELATIONSHIP_SELECT_EMPLOYEE_RECORD: "relationshipselectemployeerecord", // "relationshipselectemployeerecord"
                        +REPORT_DEFINITION: "reportdefinition", // "reportdefinition"
                        +REQUEST_LEVEL_RECORD1: "requestlevelrecord1", // "requestlevelrecord1"
                        +REQUEST_LEVEL_RECORD2: "requestlevelrecord2", // "requestlevelrecord2"
                        +RESOURCE: "resource", // "resource"
                        +RESTLET: "restlet", // "restlet"
                        +RESTLET_DEPLOYMENT: "restletdeployment", // "restletdeployment"
                        +RESTRICTIONS_ONCE_REMOVED: "restrictionsonceremoved", // "restrictionsonceremoved"
                        +RESTRICTIONS_TWICE_REMOVED: "restrictionstwiceremoved", // "restrictionstwiceremoved"
                        +RESTRICTION_ANNOTATION_TEST_RECORD: "restrictionannotationtestrecord", // "restrictionannotationtestrecord"
                        +RESTRICTION_TEST_RECORD: "restrictiontestrecord", // "restrictiontestrecord"
                        +RETURN_AUTHORIZATION: "returnauthorization", // "returnauthorization"
                        +REV_REC_SCHEDULE: "revrecschedule", // "revrecschedule"
                        +REV_REC_TEMPLATE: "revrectemplate", // "revrectemplate"
                        +ROLE: "role", // "role"
                        +RSTR_ALT_LOCATION: "rstraltlocation", // "rstraltlocation"
                        +RSTR_LOCATION: "rstrlocation", // "rstrlocation"
                        +RSTR_RECORD: "rstrrecord", // "rstrrecord"
                        +SALES: "sales", // "sales"
                        +SALES_ORDER: "salesorder", // "salesorder"
                        +SALES_READINESS: "salesreadiness", // "salesreadiness"
                        +SALES_ROLE: "salesrole", // "salesrole"
                        +SALES_TAX_ITEM: "salestaxitem", // "salestaxitem"
                        +SALES_TERRITORY: "salesterritory", // "salesterritory"
                        +SALES_TRANSACTION: "salestransaction", // "salestransaction"
                        +SAMPLE_RECORD: "samplerecord", // "samplerecord"
                        +SCHEDULED_SCRIPT: "scheduledscript", // "scheduledscript"
                        +SCHEDULED_SCRIPT_DEPLOYMENT: "scheduledscriptdeployment", // "scheduledscriptdeployment"
                        +SCHEDULED_SCRIPT_INSTANCE: "scheduledscriptinstance", // "scheduledscriptinstance"
                        +SCRIPT: "script", // "script"
                        +SCRIPTING_TEST_RECORD: "scriptingtestrecord", // "scriptingtestrecord"
                        +SCRIPTING_TEST_RECORD_SUBRECORD2_TARGET: "scriptingtestrecordsubrecord2target", // "scriptingtestrecordsubrecord2target"
                        +SCRIPTING_TEST_RECORD_SUBRECORD2_TARGET2: "scriptingtestrecordsubrecord2target2", // "scriptingtestrecordsubrecord2target2"
                        +SCRIPTING_TEST_RECORD_SUBRECORD3_TARGET: "scriptingtestrecordsubrecord3target", // "scriptingtestrecordsubrecord3target"
                        +SCRIPTING_TEST_RECORD_SUBRECORD3_TARGET2: "scriptingtestrecordsubrecord3target2", // "scriptingtestrecordsubrecord3target2"
                        +SCRIPTING_TEST_RECORD_SUBRECORD4_TARGET: "scriptingtestrecordsubrecord4target", // "scriptingtestrecordsubrecord4target"
                        +SCRIPTING_TEST_RECORD_SUBRECORD4_TARGET2: "scriptingtestrecordsubrecord4target2", // "scriptingtestrecordsubrecord4target2"
                        +SCRIPTING_TEST_RECORD_SUBRECORD_TARGET: "scriptingtestrecordsubrecordtarget", // "scriptingtestrecordsubrecordtarget"
                        +SCRIPTING_TEST_RECORD_SUBRECORD_TARGET2: "scriptingtestrecordsubrecordtarget2", // "scriptingtestrecordsubrecordtarget2"
                        +SCRIPTING_TEST_RECORD_TARGET: "scriptingtestrecordtarget", // "scriptingtestrecordtarget"
                        +SCRIPTING_TEST_RECORD_TARGET2: "scriptingtestrecordtarget2", // "scriptingtestrecordtarget2"
                        +SCRIPT_DEPLOYMENT: "scriptdeployment", // "scriptdeployment"
                        +SCRIPT_NOTE: "scriptnote", // "scriptnote"
                        +SCRIPT_RECORD_TYPE: "scriptrecordtype", // "scriptrecordtype"
                        +SCRIP_INH_TEST_RECORD1: "scripinhtestrecord1", // "scripinhtestrecord1"
                        +SCRIP_INH_TEST_RECORD2: "scripinhtestrecord2", // "scripinhtestrecord2"
                        +SCRIP_INH_TEST_RECORD3: "scripinhtestrecord3", // "scripinhtestrecord3"
                        +SCRIP_INH_TEST_RECORD4: "scripinhtestrecord4", // "scripinhtestrecord4"
                        +SEARCH_CAMPAIGN: "searchcampaign", // "searchcampaign"
                        +SEARCH_SCHEDULE: "searchschedule", // "searchschedule"
                        +SEARCH_URL_TEST_SOURCE_RECORD: "searchurltestsourcerecord", // "searchurltestsourcerecord"
                        +SEARCH_URL_TEST_TARGET_RECORD: "searchurltesttargetrecord", // "searchurltesttargetrecord"
                        +SELECT_OPTIONS_SOURCE_RECORD: "selectoptionssourcerecord", // "selectoptionssourcerecord"
                        +SERVICE_PURCHASE_ITEM: "servicepurchaseitem", // "servicepurchaseitem"
                        +SERVICE_RESALE_ITEM: "serviceresaleitem", // "serviceresaleitem"
                        +SERVICE_SALE_ITEM: "servicesaleitem", // "servicesaleitem"
                        +SHIPPING_PACKAGE: "shippingpackage", // "shippingpackage"
                        +SHIPPING_PARTNERS_PLUGIN: "shippingpartnersplugin", // "shippingpartnersplugin"
                        +SHIP_ITEM: "shipitem", // "shipitem"
                        +SHOPPING_CART: "shoppingcart", // "shoppingcart"
                        +SIMPLE_RECORD: "simplerecord", // "simplerecord"
                        +SIMPLE_RECORD_LOCATION: "simplerecordlocation", // "simplerecordlocation"
                        +SITE_CATEGORY: "sitecategory", // "sitecategory"
                        +SLAVE: "slave", // "slave"
                        +SLAVE_EMPTY_EXPRESSION: "slaveemptyexpression", // "slaveemptyexpression"
                        +SLAVE_FEATURE: "slavefeature", // "slavefeature"
                        +SLAVE_MASTER_PERMISSION: "slavemasterpermission", // "slavemasterpermission"
                        +SLAVE_PERMISSION: "slavepermission", // "slavepermission"
                        +SLAVE_TARGET_PROPERTY: "slavetargetproperty", // "slavetargetproperty"
                        +SLAVE_VALID_EXPRESSION: "slavevalidexpression", // "slavevalidexpression"
                        +SOLUTION: "solution", // "solution"
                        +SORT_BASE_RECORD: "sortbaserecord", // "sortbaserecord"
                        +SORT_RECORD: "sortrecord", // "sortrecord"
                        +SORT_RELATED_RECORD: "sortrelatedrecord", // "sortrelatedrecord"
                        +STATIC_LIST_RECORD: "staticlistrecord", // "staticlistrecord"
                        +STATIC_OPTIONS_FIELD_TEST_RECORD: "staticoptionsfieldtestrecord", // "staticoptionsfieldtestrecord"
                        +STATIC_OPTIONS_VALUE: "staticoptionsvalue", // "staticoptionsvalue"
                        +STORE_TAB: "storetab", // "storetab"
                        +STUDENT_RECORD: "studentrecord", // "studentrecord"
                        +SUBLIST: "sublist", // "sublist"
                        +SUBSIDIARY: "subsidiary", // "subsidiary"
                        +SUBTOTAL_ITEM: "subtotalitem", // "subtotalitem"
                        +SUB_SELECT_GROUP_RECORD: "subselectgrouprecord", // "subselectgrouprecord"
                        +SUITELET: "suitelet", // "suitelet"
                        +SUITELET_DEPLOYMENT: "suiteletdeployment", // "suiteletdeployment"
                        +SUITE_SCRIPT_DETAIL: "suitescriptdetail", // "suitescriptdetail"
                        +SUPPORT_CASE: "supportcase", // "supportcase"
                        +SUPPORT_CASE_ISSUE: "supportcaseissue", // "supportcaseissue"
                        +SUPPORT_CASE_ORIGIN: "supportcaseorigin", // "supportcaseorigin"
                        +SUPPORT_CASE_PRIORITY: "supportcasepriority", // "supportcasepriority"
                        +SUPPORT_CASE_STATUS: "supportcasestatus", // "supportcasestatus"
                        +SUPPORT_CASE_TYPE: "supportcasetype", // "supportcasetype"
                        +SUPPORT_TERRITORY: "supportterritory", // "supportterritory"
                        +SYSTEM_EMAIL_TEMPLATE: "systememailtemplate", // "systememailtemplate"
                        +SYSTEM_JOURNAL: "systemjournal", // "systemjournal"
                        +SYSTEM_NOTE: "systemnote", // "systemnote"
                        +SYSTEM_NOTE_FIELD: "systemnotefield", // "systemnotefield"
                        +TABLE_CONDITION_TEST_RECORD: "tableconditiontestrecord", // "tableconditiontestrecord"
                        +TASK: "task", // "task"
                        +TASK_ITEM_STATUS: "taskitemstatus", // "taskitemstatus"
                        +TAX_CALCULATION_PLUGIN: "taxcalculationplugin", // "taxcalculationplugin"
                        +TAX_ITEM_TAX_GROUP: "taxitemtaxgroup", // "taxitemtaxgroup"
                        +TAX_PERIOD: "taxperiod", // "taxperiod"
                        +TAX_TYPE: "taxtype", // "taxtype"
                        +TERM: "term", // "term"
                        +TESTDOAGGREGATEDOSUBTYPE: "testdoaggregatedosubtype", // "testdoaggregatedosubtype"
                        +TESTDOAGGREGATERESTRICTIONRECORD: "testdoaggregaterestrictionrecord", // "testdoaggregaterestrictionrecord"
                        +TEST_COMPOSED_RECORD1: "testcomposedrecord1", // "testcomposedrecord1"
                        +TEST_COMPOSED_RECORD2: "testcomposedrecord2", // "testcomposedrecord2"
                        +TEST_COMPOSED_RECORD3: "testcomposedrecord3", // "testcomposedrecord3"
                        +TEST_CONFIGURABLE_RECORD: "testconfigurablerecord", // "testconfigurablerecord"
                        +TEST_DO_AGGREGATE_RECORD: "testdoaggregaterecord", // "testdoaggregaterecord"
                        +TEST_EXPOSURE_RECORD: "testexposurerecord", // "testexposurerecord"
                        +TEST_FEATURE_RECORD: "testfeaturerecord", // "testfeaturerecord"
                        +TEST_FULL_RECORD: "testfullrecord", // "testfullrecord"
                        +TEST_MACROS_UMD_RECORD: "testmacrosumdrecord", // "testmacrosumdrecord"
                        +TEST_MULTI_TABLE_PERSISTENCE_RECORD: "testmultitablepersistencerecord", // "testmultitablepersistencerecord"
                        +TEST_NEW_URLS_RECORD: "testnewurlsrecord", // "testnewurlsrecord"
                        +TEST_NEW_URLS_TARGET_RECORD: "testnewurlstargetrecord", // "testnewurlstargetrecord"
                        +TEST_NEW_URLS_UNSUPPORTED_RECORD: "testnewurlsunsupportedrecord", // "testnewurlsunsupportedrecord"
                        +TEST_NEXT_STANDARD_RECORD: "testnextstandardrecord", // "testnextstandardrecord"
                        +TEST_PLUGIN: "testplugin", // "testplugin"
                        +TEST_PRIMARY_RECORD_FOR_RELATIONSHIPS: "testprimaryrecordforrelationships", // "testprimaryrecordforrelationships"
                        +TEST_RECORD: "testrecord", // "testrecord"
                        +TEST_RECORD_ACTION_RECORD: "testrecordactionrecord", // "testrecordactionrecord"
                        +TEST_RECORD_UNIQUE_KEY: "testrecorduniquekey", // "testrecorduniquekey"
                        +TEST_RECORD_WITHOUT_LABEL: "testrecordwithoutlabel", // "testrecordwithoutlabel"
                        +TEST_RECORD_WITH_DISABLED_RECORD_SORT_FIELDS: "testrecordwithdisabledrecordsortfields", // "testrecordwithdisabledrecordsortfields"
                        +TEST_RECORD_WITH_SORT_FIELDS: "testrecordwithsortfields", // "testrecordwithsortfields"
                        +TEST_REGRESSION_RECORD: "testregressionrecord", // "testregressionrecord"
                        +TEST_RELATED_PROPERTY: "testrelatedproperty", // "testrelatedproperty"
                        +TEST_SECURED_RECORD: "testsecuredrecord", // "testsecuredrecord"
                        +TEST_SIMPLE_PERSISTENCE_RECORD: "testsimplepersistencerecord", // "testsimplepersistencerecord"
                        +TEST_SIMPLE_PERSISTENCE_SELECT_SIDE_RECORD: "testsimplepersistenceselectsiderecord", // "testsimplepersistenceselectsiderecord"
                        +TEST_SLAVING_RATE_FIELD_RECORD: "testslavingratefieldrecord", // "testslavingratefieldrecord"
                        +TEST_SLAVING_RECORD: "testslavingrecord", // "testslavingrecord"
                        +TEST_SLAVING_RECORD_OPTIMIZED: "testslavingrecordoptimized", // "testslavingrecordoptimized"
                        +TEST_SOURCING_MASTER_FIELD_ANNOTATION_MASTER: "testsourcingmasterfieldannotationmaster", // "testsourcingmasterfieldannotationmaster"
                        +TEST_SOURCING_MASTER_FIELD_ANNOTATION_RECORD: "testsourcingmasterfieldannotationrecord", // "testsourcingmasterfieldannotationrecord"
                        +TEST_SOURCING_OPTIONS_CONDITION_MASTER: "testsourcingoptionsconditionmaster", // "testsourcingoptionsconditionmaster"
                        +TEST_SOURCING_OPTIONS_CONDITION_RECORD: "testsourcingoptionsconditionrecord", // "testsourcingoptionsconditionrecord"
                        +TEST_SOURCING_OPTIONS_CONDITION_TARGET: "testsourcingoptionsconditiontarget", // "testsourcingoptionsconditiontarget"
                        +TEST_SOURCING_SUBLIST_FIELD_ANNOTATION_MASTER: "testsourcingsublistfieldannotationmaster", // "testsourcingsublistfieldannotationmaster"
                        +TEST_SOURCING_SUBLIST_FIELD_ANNOTATION_RECORD: "testsourcingsublistfieldannotationrecord", // "testsourcingsublistfieldannotationrecord"
                        +TEST_SOURCING_VALUE_RATE_COL_MASTER: "testsourcingvalueratecolmaster", // "testsourcingvalueratecolmaster"
                        +TEST_SOURCING_VALUE_RATE_COL_RECORD: "testsourcingvalueratecolrecord", // "testsourcingvalueratecolrecord"
                        +TEST_STANDARD_RECORD: "teststandardrecord", // "teststandardrecord"
                        +TEST_TRANSACTION: "testtransaction", // "testtransaction"
                        +TIME_BILL: "timebill", // "timebill"
                        +TOPIC: "topic", // "topic"
                        +TRACKING_NUMBER: "trackingnumber", // "trackingnumber"
                        +TRANSACTION: "transaction", // "transaction"
                        +TRANSACTION_ADDRESSBOOK: "transactionaddressbook", // "transactionaddressbook"
                        +TRANSACTION_BILLING_ADDRESSBOOK: "transactionbillingaddressbook", // "transactionbillingaddressbook"
                        +TRANSACTION_NUMBERING_AUDIT_LOG: "transactionnumberingauditlog", // "transactionnumberingauditlog"
                        +TRANSACTION_RETURN_ADDRESSBOOK: "transactionreturnaddressbook", // "transactionreturnaddressbook"
                        +TRANSACTION_SHIPPING_ADDRESSBOOK: "transactionshippingaddressbook", // "transactionshippingaddressbook"
                        +TRANSFER: "transfer", // "transfer"
                        +TRANSFER_ORDER: "transferorder", // "transferorder"
                        +TWO_FACTOR_DEVICE: "twofactordevice", // "twofactordevice"
                        +TYPE_FIELD_PARENT_RECORD: "typefieldparentrecord", // "typefieldparentrecord"
                        +TYPE_FIELD_RECORD: "typefieldrecord", // "typefieldrecord"
                        +UMD_FIELD: "umdfield", // "umdfield"
                        +UNDELIVERED_EMAIL: "undeliveredemail", // "undeliveredemail"
                        +UNIFICATION_TEST: "unificationtest", // "unificationtest"
                        +USER_EVENT_SCRIPT: "usereventscript", // "usereventscript"
                        +USER_EVENT_SCRIPT_DEPLOYMENT: "usereventscriptdeployment", // "usereventscriptdeployment"
                        +USRCATEGORY: "usrcategory", // "usrcategory"
                        +USRSAVEDSEARCH: "usrsavedsearch", // "usrsavedsearch"
                        +USR_ANALYTICAL: "usranalytical", // "usranalytical"
                        +USR_AUDITING_SOURCE_RECORD: "usrauditingsourcerecord", // "usrauditingsourcerecord"
                        +USR_AUDIT_LOG: "usrauditlog", // "usrauditlog"
                        +USR_CHANNEL_AG_BTH_ROOT: "usrchannelagbthroot", // "usrchannelagbthroot"
                        +USR_CHANNEL_AG_BTH_ROOT_SUB_TYPE: "usrchannelagbthrootsubtype", // "usrchannelagbthrootsubtype"
                        +USR_CHANNEL_AG_BTH_SEARCH_MTM_ROOT: "usrchannelagbthsearchmtmroot", // "usrchannelagbthsearchmtmroot"
                        +USR_CHANNEL_AG_BTH_SEARCH_MTM_SUB_TYPE: "usrchannelagbthsearchmtmsubtype", // "usrchannelagbthsearchmtmsubtype"
                        +USR_CHANNEL_AG_BTH_SEARCH_MTO_ROOT: "usrchannelagbthsearchmtoroot", // "usrchannelagbthsearchmtoroot"
                        +USR_CHANNEL_AG_BTH_SEARCH_MTO_SUB_TYPE: "usrchannelagbthsearchmtosubtype", // "usrchannelagbthsearchmtosubtype"
                        +USR_CHANNEL_AG_SRC_ROOT: "usrchannelagsrcroot", // "usrchannelagsrcroot"
                        +USR_CHANNEL_AG_SRC_ROOT_SUB_TYPE: "usrchannelagsrcrootsubtype", // "usrchannelagsrcrootsubtype"
                        +USR_CHANNEL_AG_SRC_SEARCH_MTM_PRIMARY: "usrchannelagsrcsearchmtmprimary", // "usrchannelagsrcsearchmtmprimary"
                        +USR_CHANNEL_AG_SRC_SEARCH_MTO_PRIMARY: "usrchannelagsrcsearchmtoprimary", // "usrchannelagsrcsearchmtoprimary"
                        +USR_CHANNEL_AG_TGT_ROOT: "usrchannelagtgtroot", // "usrchannelagtgtroot"
                        +USR_CHANNEL_AG_TGT_SEARCH_MTM_ROOT: "usrchannelagtgtsearchmtmroot", // "usrchannelagtgtsearchmtmroot"
                        +USR_CHANNEL_AG_TGT_SEARCH_MTM_SUB_TYPE: "usrchannelagtgtsearchmtmsubtype", // "usrchannelagtgtsearchmtmsubtype"
                        +USR_CHANNEL_AG_TGT_SEARCH_MTO_ROOT: "usrchannelagtgtsearchmtoroot", // "usrchannelagtgtsearchmtoroot"
                        +USR_CHANNEL_AG_TGT_SEARCH_MTO_SUB_TYPE: "usrchannelagtgtsearchmtosubtype", // "usrchannelagtgtsearchmtosubtype"
                        +USR_CHANNEL_STD_ROOT: "usrchannelstdroot", // "usrchannelstdroot"
                        +USR_CHANNEL_STD_SEARCH_MTM_PRIMARY: "usrchannelstdsearchmtmprimary", // "usrchannelstdsearchmtmprimary"
                        +USR_CHANNEL_STD_SEARCH_MTO_PRIMARY: "usrchannelstdsearchmtoprimary", // "usrchannelstdsearchmtoprimary"
                        +USR_EXECUTION_LOG: "usrexecutionlog", // "usrexecutionlog"
                        +USR_EXPOSE_EXTERNAL: "usrexposeexternal", // "usrexposeexternal"
                        +USR_EXPOSE_IMPORTANT: "usrexposeimportant", // "usrexposeimportant"
                        +USR_EXPOSE_INTNL_FLD_PLAIN_AG_TGT_PLAIN_MTO_ROOT: "usrexposeintnlfldplainagtgtplainmtoroot", // "usrexposeintnlfldplainagtgtplainmtoroot"
                        +USR_EXPOSE_INTNL_FLD_PLAIN_AG_TGT_PLAIN_MTO_SUB_TYPE: "usrexposeintnlfldplainagtgtplainmtosubtype", // "usrexposeintnlfldplainagtgtplainmtosubtype"
                        +USR_EXPOSE_INTNL_FLD_PLAIN_AG_TGT_ROOT: "usrexposeintnlfldplainagtgtroot", // "usrexposeintnlfldplainagtgtroot"
                        +USR_EXPOSE_INTNL_FLD_PLAIN_STD_N_VAL_MTO_PRIMARY: "usrexposeintnlfldplainstdnvalmtoprimary", // "usrexposeintnlfldplainstdnvalmtoprimary"
                        +USR_EXPOSE_INTNL_FLD_PLAIN_STD_ROOT: "usrexposeintnlfldplainstdroot", // "usrexposeintnlfldplainstdroot"
                        +USR_EXPOSE_PLAIN_FLD_INTNL_AG_BTH_N_VAL_MTO_ROOT: "usrexposeplainfldintnlagbthnvalmtoroot", // "usrexposeplainfldintnlagbthnvalmtoroot"
                        +USR_EXPOSE_PLAIN_FLD_INTNL_AG_BTH_N_VAL_MTO_SUB_TYPE: "usrexposeplainfldintnlagbthnvalmtosubtype", // "usrexposeplainfldintnlagbthnvalmtosubtype"
                        +USR_EXPOSE_PLAIN_FLD_INTNL_AG_BTH_PLAIN_MTO_ROOT: "usrexposeplainfldintnlagbthplainmtoroot", // "usrexposeplainfldintnlagbthplainmtoroot"
                        +USR_EXPOSE_PLAIN_FLD_INTNL_AG_BTH_PLAIN_MTO_SUB_TYPE: "usrexposeplainfldintnlagbthplainmtosubtype", // "usrexposeplainfldintnlagbthplainmtosubtype"
                        +USR_EXPOSE_PLAIN_FLD_INTNL_AG_SRC_N_VAL_MTO_PRIMARY: "usrexposeplainfldintnlagsrcnvalmtoprimary", // "usrexposeplainfldintnlagsrcnvalmtoprimary"
                        +USR_EXPOSE_PLAIN_FLD_INTNL_AG_SRC_PLAIN_MTO_PRIMARY: "usrexposeplainfldintnlagsrcplainmtoprimary", // "usrexposeplainfldintnlagsrcplainmtoprimary"
                        +USR_EXPOSE_PLAIN_FLD_INTNL_AG_TGT_N_VAL_MTO_ROOT: "usrexposeplainfldintnlagtgtnvalmtoroot", // "usrexposeplainfldintnlagtgtnvalmtoroot"
                        +USR_EXPOSE_PLAIN_FLD_INTNL_AG_TGT_N_VAL_MTO_SUB_TYPE: "usrexposeplainfldintnlagtgtnvalmtosubtype", // "usrexposeplainfldintnlagtgtnvalmtosubtype"
                        +USR_EXPOSE_PLAIN_FLD_INTNL_AG_TGT_PLAIN_MTO_ROOT: "usrexposeplainfldintnlagtgtplainmtoroot", // "usrexposeplainfldintnlagtgtplainmtoroot"
                        +USR_EXPOSE_PLAIN_FLD_INTNL_AG_TGT_PLAIN_MTO_SUB_TYPE: "usrexposeplainfldintnlagtgtplainmtosubtype", // "usrexposeplainfldintnlagtgtplainmtosubtype"
                        +USR_EXPOSE_PLAIN_FLD_INTNL_STD_N_VAL_MTM_PRIMARY: "usrexposeplainfldintnlstdnvalmtmprimary", // "usrexposeplainfldintnlstdnvalmtmprimary"
                        +USR_EXPOSE_PLAIN_FLD_INTNL_STD_N_VAL_MTO_PRIMARY: "usrexposeplainfldintnlstdnvalmtoprimary", // "usrexposeplainfldintnlstdnvalmtoprimary"
                        +USR_EXPOSE_PLAIN_FLD_INTNL_STD_PLAIN_MTM_PRIMARY: "usrexposeplainfldintnlstdplainmtmprimary", // "usrexposeplainfldintnlstdplainmtmprimary"
                        +USR_EXPOSE_PLAIN_FLD_INTNL_STD_PLAIN_MTO_PRIMARY: "usrexposeplainfldintnlstdplainmtoprimary", // "usrexposeplainfldintnlstdplainmtoprimary"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_AG_BTH_N_VAL_MTO_ROOT: "usrexposeplainfldplainagbthnvalmtoroot", // "usrexposeplainfldplainagbthnvalmtoroot"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_AG_BTH_N_VAL_MTO_SUB_TYPE: "usrexposeplainfldplainagbthnvalmtosubtype", // "usrexposeplainfldplainagbthnvalmtosubtype"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_AG_BTH_PLAIN_MTO_ROOT: "usrexposeplainfldplainagbthplainmtoroot", // "usrexposeplainfldplainagbthplainmtoroot"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_AG_BTH_PLAIN_MTO_SUB_TYPE: "usrexposeplainfldplainagbthplainmtosubtype", // "usrexposeplainfldplainagbthplainmtosubtype"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_AG_BTH_ROOT: "usrexposeplainfldplainagbthroot", // "usrexposeplainfldplainagbthroot"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_AG_BTH_SUB_TYPE: "usrexposeplainfldplainagbthsubtype", // "usrexposeplainfldplainagbthsubtype"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_AG_SRC_N_VAL_MTM_PRIMARY: "usrexposeplainfldplainagsrcnvalmtmprimary", // "usrexposeplainfldplainagsrcnvalmtmprimary"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_AG_SRC_N_VAL_MTO_PRIMARY: "usrexposeplainfldplainagsrcnvalmtoprimary", // "usrexposeplainfldplainagsrcnvalmtoprimary"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_AG_SRC_PLAIN_MTM_PRIMARY: "usrexposeplainfldplainagsrcplainmtmprimary", // "usrexposeplainfldplainagsrcplainmtmprimary"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_AG_SRC_PLAIN_MTO_PRIMARY: "usrexposeplainfldplainagsrcplainmtoprimary", // "usrexposeplainfldplainagsrcplainmtoprimary"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_AG_SRC_ROOT: "usrexposeplainfldplainagsrcroot", // "usrexposeplainfldplainagsrcroot"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_AG_SRC_SUB_TYPE: "usrexposeplainfldplainagsrcsubtype", // "usrexposeplainfldplainagsrcsubtype"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_AG_TGT_N_VAL_MTM_ROOT: "usrexposeplainfldplainagtgtnvalmtmroot", // "usrexposeplainfldplainagtgtnvalmtmroot"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_AG_TGT_N_VAL_MTM_SUB_TYPE: "usrexposeplainfldplainagtgtnvalmtmsubtype", // "usrexposeplainfldplainagtgtnvalmtmsubtype"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_AG_TGT_N_VAL_MTO_ROOT: "usrexposeplainfldplainagtgtnvalmtoroot", // "usrexposeplainfldplainagtgtnvalmtoroot"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_AG_TGT_N_VAL_MTO_SUB_TYPE: "usrexposeplainfldplainagtgtnvalmtosubtype", // "usrexposeplainfldplainagtgtnvalmtosubtype"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_AG_TGT_PLAIN_MTM_ROOT: "usrexposeplainfldplainagtgtplainmtmroot", // "usrexposeplainfldplainagtgtplainmtmroot"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_AG_TGT_PLAIN_MTM_SUB_TYPE: "usrexposeplainfldplainagtgtplainmtmsubtype", // "usrexposeplainfldplainagtgtplainmtmsubtype"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_AG_TGT_PLAIN_MTO_ROOT: "usrexposeplainfldplainagtgtplainmtoroot", // "usrexposeplainfldplainagtgtplainmtoroot"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_AG_TGT_PLAIN_MTO_SUB_TYPE: "usrexposeplainfldplainagtgtplainmtosubtype", // "usrexposeplainfldplainagtgtplainmtosubtype"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_AG_TGT_ROOT: "usrexposeplainfldplainagtgtroot", // "usrexposeplainfldplainagtgtroot"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_STD_N_VAL_MTM_PRIMARY: "usrexposeplainfldplainstdnvalmtmprimary", // "usrexposeplainfldplainstdnvalmtmprimary"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_STD_N_VAL_MTO_PRIMARY: "usrexposeplainfldplainstdnvalmtoprimary", // "usrexposeplainfldplainstdnvalmtoprimary"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_STD_PLAIN_MTM_PRIMARY: "usrexposeplainfldplainstdplainmtmprimary", // "usrexposeplainfldplainstdplainmtmprimary"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_STD_PLAIN_MTO_PRIMARY: "usrexposeplainfldplainstdplainmtoprimary", // "usrexposeplainfldplainstdplainmtoprimary"
                        +USR_EXPOSE_PLAIN_FLD_PLAIN_STD_ROOT: "usrexposeplainfldplainstdroot", // "usrexposeplainfldplainstdroot"
                        +USR_FEATURE_AG_BTH_ROOT: "usrfeatureagbthroot", // "usrfeatureagbthroot"
                        +USR_FEATURE_AG_BTH_ROOT_SUB_TYPE: "usrfeatureagbthrootsubtype", // "usrfeatureagbthrootsubtype"
                        +USR_FEATURE_AG_SRC_ROOT: "usrfeatureagsrcroot", // "usrfeatureagsrcroot"
                        +USR_FEATURE_AG_SRC_ROOT_SUB_TYPE: "usrfeatureagsrcrootsubtype", // "usrfeatureagsrcrootsubtype"
                        +USR_FEATURE_AG_TGT_ROOT: "usrfeatureagtgtroot", // "usrfeatureagtgtroot"
                        +USR_FEATURE_CSM_DEFAULT_COLUMNS_RECORD: "usrfeaturecsmdefaultcolumnsrecord", // "usrfeaturecsmdefaultcolumnsrecord"
                        +USR_FEATURE_CSM_IMPORTANT_JOIN_RECORD: "usrfeaturecsmimportantjoinrecord", // "usrfeaturecsmimportantjoinrecord"
                        +USR_FEATURE_CSM_INHERITANCE_RECORD: "usrfeaturecsminheritancerecord", // "usrfeaturecsminheritancerecord"
                        +USR_FEATURE_CSM_USAGE_SPECIFIC_RECORD: "usrfeaturecsmusagespecificrecord", // "usrfeaturecsmusagespecificrecord"
                        +USR_FEATURE_STD_ROOT: "usrfeaturestdroot", // "usrfeaturestdroot"
                        +USR_NON_SYSTEM_RECORD: "usrnonsystemrecord", // "usrnonsystemrecord"
                        +USR_PERMISSION_AG_BTH_DENIED_MTM_ROOT: "usrpermissionagbthdeniedmtmroot", // "usrpermissionagbthdeniedmtmroot"
                        +USR_PERMISSION_AG_BTH_DENIED_MTM_SUB_TYPE: "usrpermissionagbthdeniedmtmsubtype", // "usrpermissionagbthdeniedmtmsubtype"
                        +USR_PERMISSION_AG_BTH_DENIED_MTO_ROOT: "usrpermissionagbthdeniedmtoroot", // "usrpermissionagbthdeniedmtoroot"
                        +USR_PERMISSION_AG_BTH_DENIED_MTO_SUB_TYPE: "usrpermissionagbthdeniedmtosubtype", // "usrpermissionagbthdeniedmtosubtype"
                        +USR_PERMISSION_AG_BTH_GRANTED_MTM_ROOT: "usrpermissionagbthgrantedmtmroot", // "usrpermissionagbthgrantedmtmroot"
                        +USR_PERMISSION_AG_BTH_GRANTED_MTM_SUB_TYPE: "usrpermissionagbthgrantedmtmsubtype", // "usrpermissionagbthgrantedmtmsubtype"
                        +USR_PERMISSION_AG_BTH_GRANTED_MTO_ROOT: "usrpermissionagbthgrantedmtoroot", // "usrpermissionagbthgrantedmtoroot"
                        +USR_PERMISSION_AG_BTH_GRANTED_MTO_SUB_TYPE: "usrpermissionagbthgrantedmtosubtype", // "usrpermissionagbthgrantedmtosubtype"
                        +USR_PERMISSION_AG_BTH_ROOT: "usrpermissionagbthroot", // "usrpermissionagbthroot"
                        +USR_PERMISSION_AG_BTH_ROOT_SUB_TYPE: "usrpermissionagbthrootsubtype", // "usrpermissionagbthrootsubtype"
                        +USR_PERMISSION_AG_SRC_DENIED_MTM_PRIMARY: "usrpermissionagsrcdeniedmtmprimary", // "usrpermissionagsrcdeniedmtmprimary"
                        +USR_PERMISSION_AG_SRC_DENIED_MTO_PRIMARY: "usrpermissionagsrcdeniedmtoprimary", // "usrpermissionagsrcdeniedmtoprimary"
                        +USR_PERMISSION_AG_SRC_GRANTED_MTM_PRIMARY: "usrpermissionagsrcgrantedmtmprimary", // "usrpermissionagsrcgrantedmtmprimary"
                        +USR_PERMISSION_AG_SRC_GRANTED_MTO_PRIMARY: "usrpermissionagsrcgrantedmtoprimary", // "usrpermissionagsrcgrantedmtoprimary"
                        +USR_PERMISSION_AG_SRC_ROOT: "usrpermissionagsrcroot", // "usrpermissionagsrcroot"
                        +USR_PERMISSION_AG_SRC_ROOT_SUB_TYPE: "usrpermissionagsrcrootsubtype", // "usrpermissionagsrcrootsubtype"
                        +USR_PERMISSION_AG_TGT_DENIED_MTM_ROOT: "usrpermissionagtgtdeniedmtmroot", // "usrpermissionagtgtdeniedmtmroot"
                        +USR_PERMISSION_AG_TGT_DENIED_MTM_SUB_TYPE: "usrpermissionagtgtdeniedmtmsubtype", // "usrpermissionagtgtdeniedmtmsubtype"
                        +USR_PERMISSION_AG_TGT_DENIED_MTO_ROOT: "usrpermissionagtgtdeniedmtoroot", // "usrpermissionagtgtdeniedmtoroot"
                        +USR_PERMISSION_AG_TGT_DENIED_MTO_SUB_TYPE: "usrpermissionagtgtdeniedmtosubtype", // "usrpermissionagtgtdeniedmtosubtype"
                        +USR_PERMISSION_AG_TGT_GRANTED_MTM_ROOT: "usrpermissionagtgtgrantedmtmroot", // "usrpermissionagtgtgrantedmtmroot"
                        +USR_PERMISSION_AG_TGT_GRANTED_MTM_SUB_TYPE: "usrpermissionagtgtgrantedmtmsubtype", // "usrpermissionagtgtgrantedmtmsubtype"
                        +USR_PERMISSION_AG_TGT_GRANTED_MTO_ROOT: "usrpermissionagtgtgrantedmtoroot", // "usrpermissionagtgtgrantedmtoroot"
                        +USR_PERMISSION_AG_TGT_GRANTED_MTO_SUB_TYPE: "usrpermissionagtgtgrantedmtosubtype", // "usrpermissionagtgtgrantedmtosubtype"
                        +USR_PERMISSION_AG_TGT_ROOT: "usrpermissionagtgtroot", // "usrpermissionagtgtroot"
                        +USR_PERMISSION_STD_DENIED_MTM_PRIMARY: "usrpermissionstddeniedmtmprimary", // "usrpermissionstddeniedmtmprimary"
                        +USR_PERMISSION_STD_DENIED_MTO_PRIMARY: "usrpermissionstddeniedmtoprimary", // "usrpermissionstddeniedmtoprimary"
                        +USR_PERMISSION_STD_GRANTED_MTM_PRIMARY: "usrpermissionstdgrantedmtmprimary", // "usrpermissionstdgrantedmtmprimary"
                        +USR_PERMISSION_STD_GRANTED_MTO_PRIMARY: "usrpermissionstdgrantedmtoprimary", // "usrpermissionstdgrantedmtoprimary"
                        +USR_PERMISSION_STD_ROOT: "usrpermissionstdroot", // "usrpermissionstdroot"
                        +USR_POLYMORPHIC_CHILD_ONE_RECORD: "usrpolymorphicchildonerecord", // "usrpolymorphicchildonerecord"
                        +USR_POLYMORPHIC_CHILD_TWO_RECORD: "usrpolymorphicchildtworecord", // "usrpolymorphicchildtworecord"
                        +USR_POLYMORPHIC_JOIN_TEST_RECORD: "usrpolymorphicjointestrecord", // "usrpolymorphicjointestrecord"
                        +USR_TARGET_PROPERTIES_GROUP_BY_TARGET_RECORD: "usrtargetpropertiesgroupbytargetrecord", // "usrtargetpropertiesgroupbytargetrecord"
                        +USR_TARGET_PROPERTIES_MTO2_TARGET_RECORD: "usrtargetpropertiesmto2targetrecord", // "usrtargetpropertiesmto2targetrecord"
                        +USR_TARGET_PROPERTIES_MTO_TARGET_RECORD: "usrtargetpropertiesmtotargetrecord", // "usrtargetpropertiesmtotargetrecord"
                        +USR_TARGET_PROPERTIES_ROOT_RECORD: "usrtargetpropertiesrootrecord", // "usrtargetpropertiesrootrecord"
                        +USR_UNIVERSAL: "usruniversal", // "usruniversal"
                        +VENDOR: "vendor", // "vendor"
                        +VENDOR_BILL: "vendorbill", // "vendorbill"
                        +VENDOR_CATEGORY: "vendorcategory", // "vendorcategory"
                        +VENDOR_CREDIT: "vendorcredit", // "vendorcredit"
                        +VENDOR_PAYMENT: "vendorpayment", // "vendorpayment"
                        +VENDOR_SUBSIDIARY_RELATIONSHIP: "vendorsubsidiaryrelationship", // "vendorsubsidiaryrelationship"
                        +WEBAPP: "webapp", // "webapp"
                        +WEB_SITE: "website", // "website"
                        +WIN_LOSS_REASON: "winlossreason", // "winlossreason"
                        +WORKFLOW_ACTION_SCRIPT: "workflowactionscript", // "workflowactionscript"
                        +WORKFLOW_ACTION_SCRIPT_DEPLOYMENT: "workflowactionscriptdeployment", // "workflowactionscriptdeployment"
                        +WORKPLACE: "workplace", // "workplace"
                        +WORK_CALENDAR: "workcalendar" // "workcalendar"
                        |};

  declare type AggregateT = {|
                             +AVERAGE: "AVERAGE", // "AVERAGE"
                             +AVERAGE_DISTINCT: "AVERAGE_DISTINCT", // "AVERAGE_DISTINCT"
                             +COUNT: "COUNT", // "COUNT"
                             +COUNT_DISTINCT: "COUNT_DISTINCT", // "COUNT_DISTINCT"
                             +MAXIMUM: "MAXIMUM", // "MAXIMUM"
                             +MAXIMUM_DISTINCT: "MAXIMUM_DISTINCT", // "MAXIMUM_DISTINCT"
                             +MEDIAN: "MEDIAN", // "MEDIAN"
                             +MINIMUM: "MINIMUM", // "MINIMUM"
                             +MINIMUM_DISTINCT: "MINIMUM_DISTINCT", // "MINIMUM_DISTINCT"
                             +SUM: "SUM", // "SUM"
                             +SUM_DISTINCT: "SUM_DISTINCT" // "SUM_DISTINCT"
                             |};

  declare type ReturnTypeT = {|
                              +ANY: "ANY", // "ANY"
                              +BOOLEAN: "BOOLEAN", // "BOOLEAN"
                              +CURRENCY: "CURRENCY", // "CURRENCY"
                              +DATE: "DATE", // "DATE"
                              +DATETIME: "DATETIME", // "DATETIME"
                              +DURATION: "DURATION", // "DURATION"
                              +FLOAT: "FLOAT", // "FLOAT"
                              +INTEGER: "INTEGER", // "INTEGER"
                              +KEY: "KEY", // "KEY"
                              +RELATIONSHIP: "RELATIONSHIP", // "RELATIONSHIP"
                              +STRING: "STRING", // "STRING"
                              +UNKNOWN: "UNKNOWN" // "UNKNOWN"
                              |};

  declare type SortLocaleT = {|
                              +ARABIC: "ARABIC", // "ARABIC"
                              +ARABIC_ABJ_MATCH: "ARABIC_ABJ_MATCH", // "ARABIC_ABJ_MATCH"
                              +ARABIC_ABJ_MATCH_CI: "ARABIC_ABJ_MATCH_CI", // "ARABIC_ABJ_MATCH_CI"
                              +ARABIC_ABJ_SORT: "ARABIC_ABJ_SORT", // "ARABIC_ABJ_SORT"
                              +ARABIC_ABJ_SORT_CI: "ARABIC_ABJ_SORT_CI", // "ARABIC_ABJ_SORT_CI"
                              +ARABIC_CI: "ARABIC_CI", // "ARABIC_CI"
                              +ARABIC_MATCH: "ARABIC_MATCH", // "ARABIC_MATCH"
                              +ARABIC_MATCH_CI: "ARABIC_MATCH_CI", // "ARABIC_MATCH_CI"
                              +ASCII7: "ASCII7", // "ASCII7"
                              +ASCII7_CI: "ASCII7_CI", // "ASCII7_CI"
                              +AZERBAIJANI: "AZERBAIJANI", // "AZERBAIJANI"
                              +AZERBAIJANI_CI: "AZERBAIJANI_CI", // "AZERBAIJANI_CI"
                              +BENGALI: "BENGALI", // "BENGALI"
                              +BENGALI_CI: "BENGALI_CI", // "BENGALI_CI"
                              +BIG5: "BIG5", // "BIG5"
                              +BIG5_CI: "BIG5_CI", // "BIG5_CI"
                              +BINARY: "BINARY", // "BINARY"
                              +BINARY_CI: "BINARY_CI", // "BINARY_CI"
                              +BULGARIAN: "BULGARIAN", // "BULGARIAN"
                              +BULGARIAN_CI: "BULGARIAN_CI", // "BULGARIAN_CI"
                              +CANADIAN_M: "CANADIAN_M", // "CANADIAN_M"
                              +CATALAN: "CATALAN", // "CATALAN"
                              +CATALAN_CI: "CATALAN_CI", // "CATALAN_CI"
                              +CROATIAN: "CROATIAN", // "CROATIAN"
                              +CROATIAN_CI: "CROATIAN_CI", // "CROATIAN_CI"
                              +CS_CZ: "CS_CZ", // "CS_CZ"
                              +CZECH: "CZECH", // "CZECH"
                              +CZECH_CI: "CZECH_CI", // "CZECH_CI"
                              +CZECH_PUNCTUATION: "CZECH_PUNCTUATION", // "CZECH_PUNCTUATION"
                              +CZECH_PUNCTUATION_CI: "CZECH_PUNCTUATION_CI", // "CZECH_PUNCTUATION_CI"
                              +DANISH: "DANISH", // "DANISH"
                              +DANISH_CI: "DANISH_CI", // "DANISH_CI"
                              +DANISH_M: "DANISH_M", // "DANISH_M"
                              +DA_DK: "DA_DK", // "DA_DK"
                              +DE_DE: "DE_DE", // "DE_DE"
                              +DUTCH: "DUTCH", // "DUTCH"
                              +DUTCH_CI: "DUTCH_CI", // "DUTCH_CI"
                              +EBCDIC: "EBCDIC", // "EBCDIC"
                              +EBCDIC_CI: "EBCDIC_CI", // "EBCDIC_CI"
                              +EEC_EURO: "EEC_EURO", // "EEC_EURO"
                              +EEC_EUROPA3: "EEC_EUROPA3", // "EEC_EUROPA3"
                              +EEC_EUROPA3_CI: "EEC_EUROPA3_CI", // "EEC_EUROPA3_CI"
                              +EEC_EURO_CI: "EEC_EURO_CI", // "EEC_EURO_CI"
                              +EN: "EN", // "EN"
                              +EN_AU: "EN_AU", // "EN_AU"
                              +EN_CA: "EN_CA", // "EN_CA"
                              +EN_GB: "EN_GB", // "EN_GB"
                              +EN_US: "EN_US", // "EN_US"
                              +ESTONIAN: "ESTONIAN", // "ESTONIAN"
                              +ESTONIAN_CI: "ESTONIAN_CI", // "ESTONIAN_CI"
                              +ES_AR: "ES_AR", // "ES_AR"
                              +ES_ES: "ES_ES", // "ES_ES"
                              +FINNISH: "FINNISH", // "FINNISH"
                              +FINNISH_CI: "FINNISH_CI", // "FINNISH_CI"
                              +FRENCH: "FRENCH", // "FRENCH"
                              +FRENCH_AI: "FRENCH_AI", // "FRENCH_AI"
                              +FRENCH_CI: "FRENCH_CI", // "FRENCH_CI"
                              +FRENCH_M: "FRENCH_M", // "FRENCH_M"
                              +FR_CA: "FR_CA", // "FR_CA"
                              +FR_FR: "FR_FR", // "FR_FR"
                              +GBK: "GBK", // "GBK"
                              +GBK_AI: "GBK_AI", // "GBK_AI"
                              +GBK_CI: "GBK_CI", // "GBK_CI"
                              +GENERIC_M: "GENERIC_M", // "GENERIC_M"
                              +GERMAN: "GERMAN", // "GERMAN"
                              +GERMAN_AI: "GERMAN_AI", // "GERMAN_AI"
                              +GERMAN_CI: "GERMAN_CI", // "GERMAN_CI"
                              +GERMAN_DIN: "GERMAN_DIN", // "GERMAN_DIN"
                              +GERMAN_DIN_AI: "GERMAN_DIN_AI", // "GERMAN_DIN_AI"
                              +GERMAN_DIN_CI: "GERMAN_DIN_CI", // "GERMAN_DIN_CI"
                              +GREEK: "GREEK", // "GREEK"
                              +GREEK_AI: "GREEK_AI", // "GREEK_AI"
                              +GREEK_CI: "GREEK_CI", // "GREEK_CI"
                              +HEBREW: "HEBREW", // "HEBREW"
                              +HEBREW_AI: "HEBREW_AI", // "HEBREW_AI"
                              +HEBREW_CI: "HEBREW_CI", // "HEBREW_CI"
                              +HE_IL: "HE_IL", // "HE_IL"
                              +HKSCS: "HKSCS", // "HKSCS"
                              +HKSCS_AI: "HKSCS_AI", // "HKSCS_AI"
                              +HKSCS_CI: "HKSCS_CI", // "HKSCS_CI"
                              +HUNGARIAN: "HUNGARIAN", // "HUNGARIAN"
                              +HUNGARIAN_AI: "HUNGARIAN_AI", // "HUNGARIAN_AI"
                              +HUNGARIAN_CI: "HUNGARIAN_CI", // "HUNGARIAN_CI"
                              +ICELANDIC: "ICELANDIC", // "ICELANDIC"
                              +ICELANDIC_AI: "ICELANDIC_AI", // "ICELANDIC_AI"
                              +ICELANDIC_CI: "ICELANDIC_CI", // "ICELANDIC_CI"
                              +INDONESIAN: "INDONESIAN", // "INDONESIAN"
                              +INDONESIAN_AI: "INDONESIAN_AI", // "INDONESIAN_AI"
                              +INDONESIAN_CI: "INDONESIAN_CI", // "INDONESIAN_CI"
                              +ITALIAN: "ITALIAN", // "ITALIAN"
                              +ITALIAN_AI: "ITALIAN_AI", // "ITALIAN_AI"
                              +ITALIAN_CI: "ITALIAN_CI", // "ITALIAN_CI"
                              +IT_IT: "IT_IT", // "IT_IT"
                              +JAPANESE_M: "JAPANESE_M", // "JAPANESE_M"
                              +JA_JP: "JA_JP", // "JA_JP"
                              +KOREAN_M: "KOREAN_M", // "KOREAN_M"
                              +KO_KR: "KO_KR", // "KO_KR"
                              +LATIN: "LATIN", // "LATIN"
                              +LATIN_AI: "LATIN_AI", // "LATIN_AI"
                              +LATIN_CI: "LATIN_CI", // "LATIN_CI"
                              +LATVIAN: "LATVIAN", // "LATVIAN"
                              +LATVIAN_AI: "LATVIAN_AI", // "LATVIAN_AI"
                              +LATVIAN_CI: "LATVIAN_CI", // "LATVIAN_CI"
                              +LITHUANIAN: "LITHUANIAN", // "LITHUANIAN"
                              +LITHUANIAN_AI: "LITHUANIAN_AI", // "LITHUANIAN_AI"
                              +LITHUANIAN_CI: "LITHUANIAN_CI", // "LITHUANIAN_CI"
                              +MALAY: "MALAY", // "MALAY"
                              +MALAY_AI: "MALAY_AI", // "MALAY_AI"
                              +MALAY_CI: "MALAY_CI", // "MALAY_CI"
                              +NL_NL: "NL_NL", // "NL_NL"
                              +NORWEGIAN: "NORWEGIAN", // "NORWEGIAN"
                              +NORWEGIAN_AI: "NORWEGIAN_AI", // "NORWEGIAN_AI"
                              +NORWEGIAN_CI: "NORWEGIAN_CI", // "NORWEGIAN_CI"
                              +POLISH: "POLISH", // "POLISH"
                              +POLISH_AI: "POLISH_AI", // "POLISH_AI"
                              +POLISH_CI: "POLISH_CI", // "POLISH_CI"
                              +PT_BR: "PT_BR", // "PT_BR"
                              +PUNCTUATION: "PUNCTUATION", // "PUNCTUATION"
                              +PUNCTUATION_AI: "PUNCTUATION_AI", // "PUNCTUATION_AI"
                              +PUNCTUATION_CI: "PUNCTUATION_CI", // "PUNCTUATION_CI"
                              +ROMANIAN: "ROMANIAN", // "ROMANIAN"
                              +ROMANIAN_AI: "ROMANIAN_AI", // "ROMANIAN_AI"
                              +ROMANIAN_CI: "ROMANIAN_CI", // "ROMANIAN_CI"
                              +RUSSIAN: "RUSSIAN", // "RUSSIAN"
                              +RUSSIAN_AI: "RUSSIAN_AI", // "RUSSIAN_AI"
                              +RUSSIAN_CI: "RUSSIAN_CI", // "RUSSIAN_CI"
                              +RU_RU: "RU_RU", // "RU_RU"
                              +SCHINESE_PINYIN_M: "SCHINESE_PINYIN_M", // "SCHINESE_PINYIN_M"
                              +SCHINESE_RADICAL_M: "SCHINESE_RADICAL_M", // "SCHINESE_RADICAL_M"
                              +SCHINESE_STROKE_M: "SCHINESE_STROKE_M", // "SCHINESE_STROKE_M"
                              +SLOVAK: "SLOVAK", // "SLOVAK"
                              +SLOVAK_AI: "SLOVAK_AI", // "SLOVAK_AI"
                              +SLOVAK_CI: "SLOVAK_CI", // "SLOVAK_CI"
                              +SLOVENIAN: "SLOVENIAN", // "SLOVENIAN"
                              +SLOVENIAN_AI: "SLOVENIAN_AI", // "SLOVENIAN_AI"
                              +SLOVENIAN_CI: "SLOVENIAN_CI", // "SLOVENIAN_CI"
                              +SPANISH: "SPANISH", // "SPANISH"
                              +SPANISH_AI: "SPANISH_AI", // "SPANISH_AI"
                              +SPANISH_CI: "SPANISH_CI", // "SPANISH_CI"
                              +SPANISH_M: "SPANISH_M", // "SPANISH_M"
                              +SV_SE: "SV_SE", // "SV_SE"
                              +SWEDISH: "SWEDISH", // "SWEDISH"
                              +SWEDISH_AI: "SWEDISH_AI", // "SWEDISH_AI"
                              +SWEDISH_CI: "SWEDISH_CI", // "SWEDISH_CI"
                              +SWISS: "SWISS", // "SWISS"
                              +SWISS_AI: "SWISS_AI", // "SWISS_AI"
                              +SWISS_CI: "SWISS_CI", // "SWISS_CI"
                              +TCHINESE_RADICAL_M: "TCHINESE_RADICAL_M", // "TCHINESE_RADICAL_M"
                              +TCHINESE_STROKE_M: "TCHINESE_STROKE_M", // "TCHINESE_STROKE_M"
                              +THAI_M: "THAI_M", // "THAI_M"
                              +TH_TH: "TH_TH", // "TH_TH"
                              +TR_TR: "TR_TR", // "TR_TR"
                              +TURKISH: "TURKISH", // "TURKISH"
                              +TURKISH_AI: "TURKISH_AI", // "TURKISH_AI"
                              +TURKISH_CI: "TURKISH_CI", // "TURKISH_CI"
                              +UKRAINIAN: "UKRAINIAN", // "UKRAINIAN"
                              +UKRAINIAN_AI: "UKRAINIAN_AI", // "UKRAINIAN_AI"
                              +UKRAINIAN_CI: "UKRAINIAN_CI", // "UKRAINIAN_CI"
                              +UNICODE_BINARY: "UNICODE_BINARY", // "UNICODE_BINARY"
                              +UNICODE_BINARY_AI: "UNICODE_BINARY_AI", // "UNICODE_BINARY_AI"
                              +UNICODE_BINARY_CI: "UNICODE_BINARY_CI", // "UNICODE_BINARY_CI"
                              +VIETNAMESE: "VIETNAMESE", // "VIETNAMESE"
                              +VIETNAMESE_AI: "VIETNAMESE_AI", // "VIETNAMESE_AI"
                              +VIETNAMESE_CI: "VIETNAMESE_CI", // "VIETNAMESE_CI"
                              +WEST_EUROPEAN: "WEST_EUROPEAN", // "WEST_EUROPEAN"
                              +WEST_EUROPEAN_AI: "WEST_EUROPEAN_AI", // "WEST_EUROPEAN_AI"
                              +WEST_EUROPEAN_CI: "WEST_EUROPEAN_CI", // "WEST_EUROPEAN_CI"
                              +ZH_CN: "ZH_CN", // "ZH_CN"
                              +ZH_TW: "ZH_TW" // "ZH_TW"
                              |};

  declare export interface NQuery {
    /**
     * Create a Query object with a single query component based on the given query type.
     * @throws {SuiteScriptError} INVALID_RCRD_TYPE when query type is invalid
     */
    create(options: CreateQueryOptions): Query;

    /**
     * Loads query by id
     * @throws {SuiteScriptError} MISSING_REQD_ARGUMENT if options or id are undefined
     * @throws {SuiteScriptError} WRONG_PARAMETER_TYPE if options isn't object or id isn't number
     * @throws {SuiteScriptError} UNABLE_TO_LOAD_QUERY if query doesn't exist or no permissions to load it
     */
    load(options: LoadQueryOptions): Query;
    /**
     * Deletes query by id
     * @throws {SuiteScriptError} MISSING_REQD_ARGUMENT if options or id are undefined
     * @throws {SuiteScriptError} WRONG_PARAMETER_TYPE if options isn't object or id isn't number
     * @throws {SuiteScriptError} UNABLE_TO_DELETE_QUERY if query doesn't exist or no permissions to delete it
     */
    delete(options: DeleteQueryOptions): Query;

    /**
     * Deletes query by id
     * @throws {SuiteScriptError} MISSING_REQD_ARGUMENT if options or query are undefined
     * @throws {SuiteScriptError} WRONG_PARAMETER_TYPE if options isn't object or id isn't number
     * @throws {SuiteScriptError} UNABLE_TO_DELETE_QUERY if query doesn't exist or no permissions to delete it
     */
    runSuiteQL(options: RunSuiteQLOptions): ResultSet;

    Operator: {| ...OperatorT, ...UniOperatorT |};
    Type: TypeT;
    Aggregate: AggregateT;
    ReturnType: ReturnTypeT;
    SortLocale: SortLocaleT;
  }

}
