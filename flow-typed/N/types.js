/**
 * Flowtype definitions for types
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 * @flow
 */

declare module 'N/types' {

  import type { ServerRequest, ServerResponse } from "N/http";
  import type { Portlet } from "N/portlet";
  import type { Record, ClientCurrentRecord } from "N/record";
  import type { Search } from "N/search";
  import type { Form } from "N/ui/serverWidget";

  declare interface Client$fieldChangedContext {
    currentRecord: ClientCurrentRecord;
    sublistId: string;
    fieldId: string;
    line: number;
    column: number;
  }

  declare type Client$fieldChanged = (
    scriptContext: Client$fieldChangedContext
  ) => void;

  declare interface Client$lineInitContext {
    currentRecord: ClientCurrentRecord;
    sublistId: string;
  }

  declare type Client$lineInit = (
    scriptContext: Client$lineInitContext
  ) => void;

  declare interface Client$pageInitContext {
    currentRecord: ClientCurrentRecord;
    mode: "create" | "copy" | "edit";
  }

  declare type Client$pageInit = (
    scriptContext: Client$pageInitContext
  ) => void;

  declare interface Client$postSourcingContext {
    currentRecord: ClientCurrentRecord;
    sublistId: string;
    fieldId: string;
  }

  declare type Client$postSourcing = (
    scriptContext: Client$postSourcingContext
  ) => void;

  declare interface Client$saveRecordContext {
    currentRecord: ClientCurrentRecord;
  }

  declare type Client$saveRecord = (
    scriptContext: Client$saveRecordContext
  ) => boolean;

  declare interface Client$sublistChangedContext {
    currentRecord: ClientCurrentRecord;
    sublistId: string;

    /**
     * Commit, etc.
     */
    operation: string;
  }

  declare type Client$sublistChanged = (
    scriptContext: Client$sublistChangedContext
  ) => void;

  declare interface Client$validateDeleteContext {
    currentRecord: ClientCurrentRecord;
    sublistId: string;
  }

  declare type Client$validateDelete = (
    scriptContext: Client$validateDeleteContext
  ) => boolean;

  declare interface Client$validateFieldContext {
    currentRecord: ClientCurrentRecord;
    sublistId: string;
    fieldId: string;
    line?: number;
    column?: number;
  }

  declare type Client$validateField = (
    scriptContext: Client$validateFieldContext
  ) => boolean;

  declare interface Client$validateInsertContext {
    currentRecord: ClientCurrentRecord;
    sublistId: string;
  }

  declare type Client$validateInsert = (
    scriptContext: Client$validateInsertContext
  ) => boolean;

  declare interface Client$validateLineContext {
    currentRecord: ClientCurrentRecord;
    sublistId: string;
  }

  declare type Client$validateLine = (
    scriptContext: Client$validateLineContext
  ) => boolean;

  declare export interface ClientScript {
    fieldChanged?: Client$fieldChanged;
    lineInit?: Client$lineInit;
    pageInit?: Client$pageInit;
    postSourcing?: Client$postSourcing;
    saveRecord?: Client$saveRecord;
    sublistChanged?: Client$sublistChanged;
    validateDelete?: Client$validateDelete;
    validateField?: Client$validateField;
    validateInsert?: Client$validateInsert;
    validateLine?: Client$validateLine;
  }

  declare type UserEventType = {|
                                +APPROVE: 0, // 0
                                +CANCEL: 1, // 1
                                +CHANGEPASSWORD: 2, // 2
                                +COPY: 3, // 3
                                +CREATE: 4, // 4
                                +DELETE: 5, // 5
                                +DROPSHIP: 6, // 6
                                +EDIT: 7, // 7
                                +EDITFORECAST: 8, // 8
                                +EMAIL: 9, // 9
                                +MARKCOMPLETE: 10, // 10
                                +ORDERITEMS: 11, // 11
                                +PACK: 12, // 12
                                +PAYBILLS: 13, // 13
                                +PRINT: 14, // 14
                                +QUICKVIEW: 15, // 15
                                +REASSIGN: 16, // 16
                                +REJECT: 17, // 17
                                +SHIP: 18, // 18
                                +SPECIALORDER: 19, // 19
                                +TRANSFORM: 20, // 20
                                +VIEW: 21, // 21
                                +XEDIT: 22 // 22
                                |};
  declare interface UserEventTypes {
    APPROVE: $Values<UserEventType>;
    CANCEL: $Values<UserEventType>;
    CHANGEPASSWORD: $Values<UserEventType>;
    COPY: $Values<UserEventType>;
    CREATE: $Values<UserEventType>;
    DELETE: $Values<UserEventType>;
    DROPSHIP: $Values<UserEventType>;
    EDIT: $Values<UserEventType>;
    EDITFORECAST: $Values<UserEventType>;
    EMAIL: $Values<UserEventType>;
    MARKCOMPLETE: $Values<UserEventType>;
    ORDERITEMS: $Values<UserEventType>;
    PACK: $Values<UserEventType>;
    PAYBILLS: $Values<UserEventType>;
    PRINT: $Values<UserEventType>;
    QUICKVIEW: $Values<UserEventType>;
    REASSIGN: $Values<UserEventType>;
    REJECT: $Values<UserEventType>;
    SHIP: $Values<UserEventType>;
    SPECIALORDER: $Values<UserEventType>;
    TRANSFORM: $Values<UserEventType>;
    VIEW: $Values<UserEventType>;
    XEDIT: $Values<UserEventType>;
  }
  declare interface UserEvent$beforeLoadContext {
    newRecord: Record;
    form: Form;
    type: $Values<UserEventType>;
    UserEventType: UserEventTypes;
    request: ServerRequest;
  }

  declare type UserEvent$beforeLoad = (
    scriptContext: UserEvent$beforeLoadContext
  ) => void;

  declare interface UserEvent$beforeSubmitContext {
    newRecord: Record;
    oldRecord: Record;
    type: $Values<UserEventType>;
    UserEventType: UserEventTypes;
  }

  declare type UserEvent$beforeSubmit = (
    scriptContext: UserEvent$beforeSubmitContext
  ) => void;

  declare interface UserEvent$afterSubmitContext {
    newRecord: Record;
    oldRecord: Record;
    type: $Values<UserEventType>;
    UserEventType: UserEventTypes;
  }

  declare type UserEvent$afterSubmit = (
    scriptContext: UserEvent$afterSubmitContext
  ) => void;

  declare export interface UserEventScript {
    afterSubmit?: UserEvent$afterSubmit;
    beforeLoad?: UserEvent$beforeLoad;
    beforeSubmit?: UserEvent$beforeSubmit;
  }

  declare type ScheduledInvocationType = {|
                                          +SCHEDULED: 0, // 0
                                          +ON_DEMAND: 1, // 1
                                          +USER: 2, // 2
                                          +ABORTED: 3, // 3
                                          +SKIPPED: 4 // 4
                                          |};
  declare interface ScheduledInvocationTypes {
    SCHEDULED: $Values<ScheduledInvocationType>;
    ON_DEMAND: $Values<ScheduledInvocationType>;
    USER: $Values<ScheduledInvocationType>;
    ABORTED: $Values<ScheduledInvocationType>;
    SKIPPED: $Values<ScheduledInvocationType>;
  }
  declare interface Scheduled$executeContext {
    type: $Values<ScheduledInvocationType>;
    InvocationType: ScheduledInvocationTypes;
  }

  declare type Scheduled$execute = (
    scriptContext: Scheduled$executeContext
  ) => void;

  declare export interface ScheduledScript {
    execute: Scheduled$execute;
  }

  declare interface MapReduce$Configuration {
    retryCount?: 0 | 1 | 2 | 3;
    exitOnError?: boolean;
  }

  declare type MapReduce$config = MapReduce$Configuration;

  declare interface MapReduce$ObjectReference {
    id: string;
    type: string;
  }

  declare interface MapReduce$getInputDataContext {
      +isRestarted: boolean;
    ObjectRef: MapReduce$ObjectReference;
  }

  declare type MapReduce$getInputData = (
    scriptContext: MapReduce$getInputDataContext
  ) => Search | any | any[] | MapReduce$ObjectReference;

  declare interface MapReduce$mapContext {
      +isRestarted: boolean;
      +executionNo: number;
      +errors: MapReduce$MapReduceErrorIteratorContainer;
      +key: string;
      +value: string;
      +write: ({key: string, value: string}) => void;
  }

  declare type MapReduce$map = (
    scriptContext: MapReduce$mapContext
  ) => void;

  declare interface MapReduce$reduceContext {
      +isRestarted: boolean;
      +executionNo: number;
      +errors: MapReduce$MapReduceErrorIteratorContainer;
      +key: string;
      +values: string[];
      +write: ({key: string, value: string}) => void;
  }

  declare type MapReduce$reduce = (
    scriptContext: MapReduce$reduceContext
  ) => void;

  declare interface MapReduce$MapReduceIterator {
    each(callback: (key: string, value: string) => boolean): void;
  }

  declare interface MapReduce$MapReduceIteratorContainer {
    iterator(): MapReduce$MapReduceIterator;
  }

  declare interface MapReduce$MapReduceErrorIterator {
    each(
      callback: (key: string, error: string, executionNo: number) => boolean
    ): void;
  }

  declare interface MapReduce$MapReduceErrorIteratorContainer {
    iterator(): MapReduce$MapReduceErrorIterator;
  }

  declare interface MapReduce$InputSummary {
    dateCreated: Date;
    error: string;
    seconds: number;
    usage: number;
  }

  declare interface MapReduce$MapSummary {
    dateCreated: Date;
    seconds: number;
    usage: number;
    concurrency: number;
    yields: number;
    keys: MapReduce$MapReduceIteratorContainer;
    errors: MapReduce$MapReduceErrorIteratorContainer;
  }

  declare interface MapReduce$ReduceSummary {
    dateCreated: Date;
    seconds: number;
    usage: number;
    concurrency: number;
    yields: number;
    keys: MapReduce$MapReduceIteratorContainer;
    errors: MapReduce$MapReduceErrorIteratorContainer;
  }

  declare interface MapReduce$summarizeContext {
      +isRestarted: boolean;
    dateCreated: Date;
    seconds: number;
    usage: number;
    concurrency: number;
    yields: number;
    inputSummary: MapReduce$InputSummary;
    mapSummary: MapReduce$MapSummary;
    reduceSummary: MapReduce$ReduceSummary;
    output: MapReduce$MapReduceIteratorContainer;
  }

  declare type MapReduce$summarize = (
    summary: MapReduce$summarizeContext
  ) => void;

  declare export type MapReduceScript = {|
    getInputData: MapReduce$getInputData;
    map?: MapReduce$map;
    reduce?: MapReduce$reduce;
    summarize?: MapReduce$summarize;
  |}

  declare interface Portlet$renderContext {
    portlet: Portlet;
    column: number;

    /**
     * This is entityid in the docs, but entity in practice
     */
    entity: string;
  }

  declare type Portlet$render = (
    scriptContext: Portlet$renderContext
  ) => void;

  declare export interface PortletScript {
    render: Portlet$render;
  }

  declare interface Suitelet$onRequestContext {
    request: ServerRequest;
    response: ServerResponse;
  }

  declare type Suitelet$onRequest = (
    scriptContext: Suitelet$onRequestContext
  ) => void;

  declare export interface SuiteletScript {
    onRequest: Suitelet$onRequest;
  }

  declare interface MassUpdate$eachContext {
    id: number;
    type: string;
  }

  declare type MassUpdate$each = (
    scriptContext: MassUpdate$eachContext
  ) => void;

  declare export interface MassUpdateScript {
    each: MassUpdate$each;
  }

  declare interface WorkflowAction$onActionContext {
    newRecord: Record;
    oldRecord: Record;
  }

  declare type WorkflowAction$onAction = (
    scriptContext: WorkflowAction$onActionContext
  ) => void;

  declare export interface WorkflowActionScript {
    onAction: WorkflowAction$onAction;
  }

  declare type JsonValue = string | number | boolean | JsonObject | Array<JsonValue>;
  declare type JsonObject = {[key: string]: JsonValue};

  declare type RESTlet$get = (requestParameters: {[key: string]: string}) => string | JsonValue;

  declare type RESTlet$delete_ = (requestParameters: {[key: string]: string}) => string | JsonValue;

  declare type RESTlet$post = (requestBody: string | JsonData) => string | JsonData;

  declare type RESTlet$put = (requestBody: string | JsonData) => string | JsonData;

  declare export interface RestletScript {
    get?: RESTlet$get;
    delete?: RESTlet$delete_;
    put?: RESTlet$put;
    post?: RESTlet$post;
  }

  declare interface BundleInstallation$onAfterInstallContext {
    version: number;
  }

  declare type BundleInstallation$afterInstall = (
    scriptContext: BundleInstallation$onAfterInstallContext
  ) => void;

  declare interface BundleInstallation$onAfterUpdateContext {
    fromVersion: number;
    toVersion: number;
  }

  declare type BundleInstallation$afterUpdate = (
    scriptContext: BundleInstallation$onAfterUpdateContext
  ) => void;

  declare interface BundleInstallation$onBeforeInstallContext {
    version: number;
  }

  declare type BundleInstallation$beforeInstall = (
    scriptContext: BundleInstallation$onBeforeInstallContext
  ) => void;

  declare interface BundleInstallation$onBeforeUninstallContext {
    version: number;
  }

  declare type BundleInstallation$beforeUninstall = (
    scriptContext: BundleInstallation$onBeforeUninstallContext
  ) => void;

  declare interface BundleInstallation$onBeforeUpdateContext {
    fromVersion: number;
    toVersion: number;
  }

  declare type BundleInstallation$beforeUpdate = (
    scriptContext: BundleInstallation$onBeforeUpdateContext
  ) => void;

  declare export interface BundleInstallationScript {
    afterInstall?: BundleInstallation$afterInstall;
    afterUpdate?: BundleInstallation$afterUpdate;
    beforeInstall?: BundleInstallation$beforeInstall;
    beforeUninstall?: BundleInstallation$beforeUninstall;
    beforeUpdate?: BundleInstallation$beforeUpdate;
  }

}
