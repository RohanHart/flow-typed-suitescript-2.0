/**
 * Flowtype definitions for task
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 * @flow
 */

declare module "N/task" {

  import type { File } from "N/file";

  declare interface CheckStatusOptions {
    taskId: string;
  }
  declare type TaskCreateOptions =
    | CsvImportTaskCreateOptions
    | EntityDeduplicationTaskCreateOptions
    | MapReduceScriptTaskCreateOptions
    | ScheduledScriptTaskCreateOptions
    | WorkflowTriggerTaskCreateOptions
    | SearchTaskCreateOptions;
  declare interface SearchTaskCreateOptions {
    taskType: typeof TaskType.SEARCH;
    savedSearchId?: number;
    fileId?: number;
    filePath?: string;
  }
  declare interface SearchTask {
    submit(): string;
    addInboundDependency(
      dependency: ScheduledScriptTask | MapReduceScriptTask
    ): void;
    toString(): string;
    savedSearchId: number;
    fileId: number;
    filePath: string;
  }
  declare interface SearchTaskStatus {
    toString(): string;
    savedSearchId: number;
    fileId: number;
    status: $Values<TaskStatusT>;
    taskId: number;
  }
  declare interface CsvImportTaskCreateOptions {
    taskType: typeof TaskType.CSV_IMPORT;
    +importFile?: File | string;
    linkedFiles?: {
      [key: string]: any,
      ...
    };
    +mappingId?: number | string;
    name?: string;
    queueId?: number;
  }
  declare interface CsvImportTask {
    submit(): string;
    toString(): string;
    importFile: File | string;
    linkedFiles: any;
    mappingId: number | string;
    name: string;
    queueId: number;
  }
  declare interface CsvImportTaskStatus {
    toString(): string;
    status: $Values<TaskStatusT>;
  }
  declare interface EntityDeduplicationTaskCreateOptions {
    taskType: typeof TaskType.ENTITY_DEDUPLICATION;
    dedupeMode?: $Values<DedupeModeT>;
    entityType?: string;
    +masterRecordId?: string | number;
    masterSelectionMode?: $Values<MasterSelectionModeT>;
    recordIds?: number[];
  }
  declare interface EntityDeduplicationTask {
    submit(): string;
    toString(): string;
    dedupeMode: $Values<DedupeModeT>;
    entityType: string;
    masterRecordId: number | string;
    masterSelectionMode: $Values<MasterSelectionModeT>;
    recordIds: number[];
  }
  declare interface EntityDeduplicationTaskStatus {
    toString(): string;
    status: $Values<TaskStatusT>;
  }
  declare interface MapReduceScriptTaskCreateOptions {
    taskType: typeof TaskType.MAP_REDUCE;
    scriptId?: string;
    deploymentId?: string;
    params?: any;
  }
  declare interface MapReduceScriptTask {
    submit(): string;
    toString(): string;
    scriptId: string;
    deploymentId: string;
    params: any;
  }
  declare interface MapReduceScriptTaskStatus {
    getCurrentTotalSize(): number;
    getPendingMapCount(): number;
    getPendingMapSize(): number;
    getPendingOutputCount(): number;
    getPendingOutputSize(): number;
    getPendingReduceCount(): number;
    getPendingReduceSize(): number;
    getPercentageCompleted(): number;
    getTotalMapCount(): number;
    getTotalReduceCount(): number;
    getTotalOutputCount(): number;
    toString(): string;
    scriptId: string;
    deploymentId: string;
    stage: $Values<MapReduceStageT>;
    status: $Values<TaskStatusT>;
  }
  declare interface ScheduledScriptTaskCreateOptions {
    taskType: typeof TaskType.SCHEDULED_SCRIPT;
    scriptId?: string;
    deploymentId?: string;
    params?: any;
  }
  declare interface ScheduledScriptTask {
    submit(): string;
    toString(): string;
    scriptId: string;
    deploymentId: string;
    params: any;
  }
  declare interface ScheduledScriptTaskStatus {
    toString(): string;
    scriptId: string;
    deploymentId: string;
    status: $Values<TaskStatusT>;
  }
  declare interface WorkflowTriggerTaskCreateOptions {
    taskType: typeof TaskType.WORKFLOW_TRIGGER;
    params?: any;
    +recordId?: number | string;
    recordType?: string;
    +workflowId?: number | string;
  }
  declare interface WorkflowTriggerTask {
    submit(): string;
    toString(): string;
    params: any;
    recordId: number | string;
    recordType: string;
    workflowId: number | string;
  }
  declare interface WorkflowTriggerTaskStatus {
    toString(): string;
    status: $Values<TaskStatusT>;
  }

  declare type DedupeEntityTypeT = {|
                                    +CUSTOMER: 0, // 0
                                    +CONTACT: 1, // 1
                                    +VENDOR: 2, // 2
                                    +PARTNER: 3, // 3
                                    +LEAD: 4, // 4
                                    +PROSPECT: 5 // 5
                                    |};

  declare type DedupeModeT = {|
                              +MERGE: 0, // 0
                              +DELETE: 1, // 1
                              +MAKE_MASTER_PARENT: 2, // 2
                              +MARK_AS_NOT_DUPES: 3 // 3
                              |};

  declare type MapReduceStageT = {|
                                  +GET_INPUT: 0, // 0
                                  +MAP: 1, // 1
                                  +SHUFFLE: 2, // 2
                                  +REDUCE: 3, // 3
                                  +SUMMARIZE: 4 // 4
                                  |};

  declare type MasterSelectionModeT = {|
                                       +CREATED_EARLIEST: 0, // 0
                                       +MOST_RECENT_ACTIVITY: 1, // 1
                                       +MOST_POPULATED_FIELDS: 2, // 2
                                       +SELECT_BY_ID: 3 // 3
                                       |};

  declare type TaskStatusT = {|
                              +PENDING: 0, // 0
                              +PROCESSING: 1, // 1
                              +COMPLETE: 2, // 2
                              +FAILED: 3 // 3
                              |};

  declare var TaskType: {|
                            +SCHEDULED_SCRIPT: "SCHEDULED_SCRIPT", // "SCHEDULED_SCRIPT"
                            +MAP_REDUCE: "MAP_REDUCE", // "MAP_REDUCE"
                            +CSV_IMPORT: "CSV_IMPORT", // "CSV_IMPORT"
                            +ENTITY_DEDUPLICATION: "ENTITY_DEDUPLICATION", // "ENTITY_DEDUPLICATION"
                            +WORKFLOW_TRIGGER: "WORKFLOW_TRIGGER", // "WORKFLOW_TRIGGER"
                            +SEARCH: "SEARCH" // "SEARCH"
                            |};

  declare export interface NTask {
    create(options: CsvImportTaskCreateOptions): CsvImportTask;
    create(options: EntityDeduplicationTaskCreateOptions): EntityDeduplicationTask;
    create(options: MapReduceScriptTaskCreateOptions): MapReduceScriptTask;
    create(options: ScheduledScriptTaskCreateOptions): ScheduledScriptTask;
    create(options: WorkflowTriggerTaskCreateOptions): WorkflowTriggerTask;
    create(options: SearchTaskCreateOptions): SearchTask;
    checkStatus(options: CheckStatusOptions):
      | ScheduledScriptTaskStatus
      | MapReduceScriptTaskStatus
      | CsvImportTaskStatus
      | EntityDeduplicationTaskStatus
      | WorkflowTriggerTaskStatus;

    DedupeEntityType: DedupeEntityTypeT;
    DedupeMode: DedupeModeT;
    MapReduceStage: MapReduceStageT;
    MasterSelectionMode: MasterSelectionModeT;
    TaskStatus: TaskStatusT;
    TaskType: typeof TaskType;
  }

}
