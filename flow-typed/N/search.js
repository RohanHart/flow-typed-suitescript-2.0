/**
 * Flowtype definitions for search
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 * @flow
 */

declare module 'N/search' {

  import type { FieldValue } from "N/record";

  /**
   * Encapsulates a search filter used in a search.
   * Use the properties for the Filter object to get and set the filter properties.
   *
   * You create a search filter object with `search.createFilter(options)` and add it to a `search.Search` object that you create with `search.create(options)` or load with search.load(options).
   *
   * Note: NetSuite uses an implicit AND operator with search filters, as opposed to filter expressions which explicitly use either AND and OR operators. Use the following guidelines with the Filter object:
   *
   * * To search for a "none of null" value, meaning do not show results without a value for the specified field, use a value of @NONE@ in the Filter.formula property.
   *
   * * To search on checkbox fields, use the IS operator with a value of T or F to search for checked
   * or unchecked fields, respectively.
   */
  declare export interface Filter {
    /**
     * Name or internal ID of the search field as a string.
     */
      +name: $ReadOnly<string>;

    /**
     * Join ID for the search filter as a string.
     */
      +join: $ReadOnly<string>;

    /**
     * Operator used for the search filter. This value is set with the search.Operator enum.
     * The search.Operator enum contains the valid operator values for this property.
     */
      +operator: $ReadOnly<$Values<typeof Operator>>;

    /**
     * Summary type for the search filter. Use this property to get or set the value of the summary type. See search.Summary.
     */
      +summary: $ReadOnly<$Values<typeof Summary>>;

    /**
     * Formula used by the search filter. Use this property to get or set the formula used by the search filter.
     */
    formula: string;
  }
  declare interface SearchColumnSetWhenOrderedByOptions {
    /**
     * The name of the search column for which the minimal or maximal value should be found.
     */
    name: string;

    /**
     * The join id for the search column.
     */
    join: string;
  }
  /**
   * Encapsulates a single search column in a search.Search. Use the methods and properties available to the Column object to get or set Column properties.
   */
  declare export interface Column {
    /**
     * Returns the search column for which the minimal or maximal value should be found when returning the search.Column value.
     */
    setWhenOrderedBy?: (options: SearchColumnSetWhenOrderedByOptions) => Column;

    /**
     * Name of a search column as a string.
     */
    name: string;

    /**
     * Join ID for a search column as a string.
     */
    join?: string;

    /**
     * Returns the summary type for a search column.
     */
    summary?: $Values<typeof Summary>;

    /**
     * Formula used for a search column as a string. To set this value, you must use formulatext, formulanumeric, formuladatetime, formulapercent, or formulacurrency.
     */
    formula?: string;

    /**
     * Label used for the search column. You can only get or set custom labels with this property.
     */
    label?: string;

    /**
     * Special function applied to values in a search column. See Help for Supported Functions.
     */
    function?: string;

    /**
     * The sort order of the column. Use the search.Sort enum to set the value.
     */
    sort?: $Values<typeof Sort>;
  }
  declare export interface Result {
    getValue(column: Column | string): boolean | string | string[];
    getText(options: Column | string): string;

    /**
     * This method is undocumented but works in client and server-side scripts in NetSuite 2019.2.  It returns an object containing all column values by name.
     */
    getAllValues(): {
      [fieldId: string]: string,
      ...
    };

    /**
     * This method is undocumented but works in client and server-side scripts in NetSuite 2019.2.  It returns an object representing the search result.
     */
    toJSON(): {
      recordType?: string,
      id?: string,
      values: {
        [columnName: string]: string | boolean,
        ...
      },
      ...
    };
    recordType: $Values<typeof Type> | string;
    id: string;
    columns: Column[];
  }
  declare interface SearchResultSetGetRangeOptions {
    start: number;
    end: number;
  }
  declare interface SearchResultSetGetRangeFunction {
    promise(options: SearchResultSetGetRangeOptions): Promise<Result[]>;
    (options: SearchResultSetGetRangeOptions): Result[];
  }
  declare interface SearchResultSetEachFunction {
    promise(callback: (result: Result) => boolean): Promise<boolean>;
    (callback: (result: Result) => boolean): void;
  }
  declare export interface ResultSet {
    each: SearchResultSetEachFunction;
    getRange: SearchResultSetGetRangeFunction;
    columns: Column[];
  }
  declare interface FetchOptions {
    /**
     * The index of the page range that bounds the desired data.
     */
    index: number;
  }
  declare interface PageNextFunction {
    promise(): Promise<Page>;
    (): Page;
  }
  declare interface PagePrevFunction {
    promise(): Promise<Page>;
    (): Page;
  }
  declare interface PagedDataFetchFunction {
    promise(options: FetchOptions): Promise<Page>;
    (options: FetchOptions): Page;
  }
  declare export interface Page {
    next: PageNextFunction;
    prev: PagePrevFunction;
    data: Result[];
    isFirst: boolean;
    isLast: boolean;
    pagedData: PagedData;
    pagedRange: PageRange;
  }
  declare export interface PageRange {
    compoundLabel: string;
    index: number;
  }
  declare export interface PagedData {
    fetch: PagedDataFetchFunction;
    count: number;
    pageRanges: PageRange[];
    pageSize: number;
    searchDefinition: Search;
  }
  declare interface RunPagedOptions {
    /**
     * Maximum number of entries per page.
     * There is an upper limit, a lower limit, and a default setting:
     * - The maximum number allowed is 1000.
     * - The minimum number allowed is 5.
     * - By default, the page size is set to 50 entries per page.
     */
    pageSize?: number;
  }
  declare interface SearchRunPagedFunction {
    promise(options?: RunPagedOptions): Promise<PagedData>;
    (options?: RunPagedOptions): PagedData;
  }
  declare export interface Search {
    searchType: $Values<typeof Type> | string;
    searchId: number;
    filters: Filter[];
    filterExpression: any[];
    columns: (Column | string)[];
    title: string;
    id: string;
    isPublic: boolean;
    save(): number;
    run(): ResultSet;
    runPaged: SearchRunPagedFunction;
  }
  declare interface CreateSearchFilterOptions {
    /**
     * Name or internal ID of the search field.
     */
    name: string;

    /**
     * Join ID for the search filter.
     */
    join?: string;

    /**
     * Operator used for the search filter. Use the search.Operator enum.
     */
    operator: $Values<typeof Operator>;

    /**
     * Values to be used as filter parameters.
     */
      +values?:
      | FieldValue
      | FieldValue[]
      | string
      | Date
      | number
      | string[]
      | Date[]
      | number[]
      | boolean;

    /**
     * Formula used by the search filter.
     */
    formula?: string;

    /**
     * Summary type for the search filter.
     */
    summary?: $Values<typeof Summary>;
  }
  declare export interface CreateSearchColumnOptions {
    name: string;
    join?: string;
    summary?: $Values<typeof Summary>;
    formula?: string;
    function?: string;
    label?: string;
    sort?: $Values<typeof Sort>;
  }
  declare interface SearchLookupFieldsOptions {
      +type: $Values<typeof Type> | string;
      +id: FieldValue | string | number;
      +columns: string | string[];
  }
  declare interface SearchLookupFieldsFunction {
    promise(options: SearchLookupFieldsOptions): Promise<any>;
    (options: SearchLookupFieldsOptions): any;
  }
  /**
   * Global search keywords string or expression.
   */
  declare interface SearchGlobalOptions {
    keywords: string;
  }
  declare interface SearchGlobalFunction {
    promise(options: SearchGlobalOptions): Promise<Result[] | void>;
    (options: SearchGlobalOptions): Result[];
  }
  declare interface SearchDuplicatesOptions {
      +type: $Values<typeof Type> | string;
    fields?: string[];
    id?: number;
  }
  declare interface SearchDuplicatesFunction {
    promise(options: SearchDuplicatesOptions): Promise<Result[]>;
    (options: SearchDuplicatesOptions): Result[];
  }
  declare interface SearchDeleteOptions {
      +id: string | number;
  }
  declare interface SearchDeleteFunction {
    promise(options: SearchDeleteOptions): Promise<void>;
    (options: SearchDeleteOptions): void;
  }
  declare interface SearchLoadOptions {
    /**
     * Internal ID or script ID of a saved search. The script ID starts with customsearch.
     */
    id: string;

    /**
     * The search type of the saved search to load. Use a value from the search.Type enum for this parameter.
     * This parameter is required if the saved search to load uses a standalone search type.
     * A standalone search type is a search type that does not have a corresponding record type.
     * Typically, the search type of the saved search can be determined automatically based on the corresponding record type.
     * In this case, this parameter is not required. For standalone search types, you must specify the search type explicitly using this parameter.
     *
     * The following is a list of standalone search types:
     * - DeletedRecord
     * - EndToEndTime
     * - ExpenseAmortPlanAndSchedule
     * - RevRecPlanAndSchedule
     * - GlLinesAuditLog
     * - Crosschargeable
     * - FinRptAggregateFR
     * - BillingAccountBillCycle
     * - BillingAccountBillRequest
     * - BinItemBalance
     * - PaymentEvent
     * - Permission
     * - GatewayNotification
     * - TimeApproval
     * - RecentRecord
     * - Role
     * - SavedSearch
     * - ShoppingCart
     * - SubscriptionRenewalHistory
     * - SuiteScriptDetail
     * - SupplyChainSnapshotDetails
     * - SystemNote
     * - TaxDetail
     * - TimesheetApproval
     * - Uber
     * - ResAllocationTimeOffConflict
     * - ComSearchOneWaySyn
     * - ComSearchGroupSyn
     * - Installment
     * - InventoryBalance
     * - InventoryNumberBin
     * - InventoryNumberItem
     * - InventoryStatusLocation
     * - InvtNumberItemBalance
     * - ItemBinNumber
     */
      +type?: string | $Values<typeof Type>;
  }
  declare interface SearchLoadFunction {
    promise(options: SearchLoadOptions): Promise<Search>;
    (options: SearchLoadOptions): Search;
  }
  declare export interface SearchCreateOptions {
    type: $Values<typeof Type> | string;
    filters?: CreateSearchFilterOptions[] | any[];
    columns?: (Column | string)[];
    title?: string;
    id?: string;
    isPublic?: boolean;
  }
  declare interface SearchCreateFunction {
    (options: SearchCreateOptions): Search;
    promise(options: SearchCreateOptions): Promise<Search>;
  }
  declare type TypeT = {|
                        +ACCOUNT: 0, // 0
                        +ACCOUNTING_BOOK: 1, // 1
                        +ACCOUNTING_CONTEXT: 2, // 2
                        +ACCOUNTING_PERIOD: 3, // 3
                        +ACTIVITY: 4, // 4
                        +ADV_INTER_COMPANY_JOURNAL_ENTRY: 5, // 5
                        +AMORTIZATION_SCHEDULE: 6, // 6
                        +AMORTIZATION_TEMPLATE: 7, // 7
                        +ASSEMBLY_BUILD: 8, // 8
                        +ASSEMBLY_ITEM: 9, // 9
                        +ASSEMBLY_UNBUILD: 10, // 10
                        +BILLING_ACCOUNT: 11, // 11
                        +BILLING_ACCOUNT_BILL_CYCLE: 12, // 12
                        +BILLING_ACCOUNT_BILL_REQUEST: 13, // 13
                        +BILLING_CLASS: 14, // 14
                        +BILLING_RATE_CARD: 15, // 15
                        +BILLING_REVENUE_EVENT: 16, // 16
                        +BILLING_SCHEDULE: 17, // 17
                        +BIN: 18, // 18
                        +BIN_TRANSFER: 19, // 19
                        +BIN_WORKSHEET: 20, // 20
                        +BLANKET_PURCHASE_ORDER: 21, // 21
                        +BOM: 22, // 22
                        +BOM_REVISION: 23, // 23
                        +BUNDLE_INSTALLATION_SCRIPT: 24, // 24
                        +CALENDAR_EVENT: 25, // 25
                        +CAMPAIGN: 26, // 26
                        +CASH_REFUND: 27, // 27
                        +CASH_SALE: 28, // 28
                        +CHARGE: 29, // 29
                        +CHARGE_RULE: 30, // 30
                        +CHECK: 31, // 31
                        +CLASSIFICATION: 32, // 32
                        +CLIENT_SCRIPT: 33, // 33
                        +CMS_CONTENT: 34, // 34
                        +CMS_CONTENT_TYPE: 35, // 35
                        +COM_SEARCH_GROUP_SYN: 36, // 36
                        +COM_SEARCH_ONE_WAY_SYN: 37, // 37
                        +COMMERCE_CATEGORY: 38, // 38
                        +COMPETITOR: 39, // 39
                        +CONSOLIDATED_EXCHANGE_RATE: 40, // 40
                        +CONTACT: 41, // 41
                        +CONTACT_CATEGORY: 42, // 42
                        +CONTACT_ROLE: 43, // 43
                        +COST_CATEGORY: 44, // 44
                        +COUPON_CODE: 45, // 45
                        +CREDIT_CARD_CHARGE: 46, // 46
                        +CREDIT_CARD_REFUND: 47, // 47
                        +CREDIT_MEMO: 48, // 48
                        +CURRENCY: 49, // 49
                        +CUSTOMER: 50, // 50
                        +CUSTOMER_CATEGORY: 51, // 51
                        +CUSTOMER_DEPOSIT: 52, // 52
                        +CUSTOMER_MESSAGE: 53, // 53
                        +CUSTOMER_PAYMENT: 54, // 54
                        +CUSTOMER_PAYMENT_AUTHORIZATION: 55, // 55
                        +CUSTOMER_REFUND: 56, // 56
                        +CUSTOMER_STATUS: 57, // 57
                        +CUSTOM_RECORD: 58, // 58
                        +CUSTOM_TRANSACTION: 59, // 59
                        +DELETED_RECORD: 60, // 60
                        +DEPARTMENT: 61, // 61
                        +DEPOSIT: 62, // 62
                        +DEPOSIT_APPLICATION: 63, // 63
                        +DESCRIPTION_ITEM: 64, // 64
                        +DISCOUNT_ITEM: 65, // 65
                        +DOWNLOAD_ITEM: 66, // 66
                        +EMPLOYEE: 67, // 67
                        +END_TO_END_TIME: 68, // 68
                        +ENTITY: 69, // 69
                        +ENTITY_ACCOUNT_MAPPING: 70, // 70
                        +ESTIMATE: 71, // 71
                        +EXPENSE_CATEGORY: 72, // 72
                        +EXPENSE_REPORT: 73, // 73
                        +FAIR_VALUE_PRICE: 74, // 74
                        +FIN_RPT_AGGREGATE_F_R: 75, // 75
                        +FIXED_AMOUNT_PROJECT_REVENUE_RULE: 76, // 76
                        +FOLDER: 77, // 77
                        +FULFILLMENT_REQUEST: 78, // 78
                        +GENERIC_RESOURCE: 79, // 79
                        +GIFT_CERTIFICATE: 80, // 80
                        +GIFT_CERTIFICATE_ITEM: 81, // 81
                        +GLOBAL_ACCOUNT_MAPPING: 82, // 82
                        +GLOBAL_INVENTORY_RELATIONSHIP: 83, // 83
                        +GL_LINES_AUDIT_LOG: 84, // 84
                        +INBOUND_SHIPMENT: 85, // 85
                        +INTER_COMPANY_JOURNAL_ENTRY: 86, // 86
                        +INTER_COMPANY_TRANSFER_ORDER: 87, // 87
                        +INVENTORY_ADJUSTMENT: 88, // 88
                        +INVENTORY_BALANCE: 89, // 89
                        +INVENTORY_COST_REVALUATION: 90, // 90
                        +INVENTORY_COUNT: 91, // 91
                        +INVENTORY_DETAIL: 92, // 92
                        +INVENTORY_ITEM: 93, // 93
                        +INVENTORY_NUMBER: 94, // 94
                        +INVENTORY_STATUS: 95, // 95
                        +INVENTORY_STATUS_CHANGE: 96, // 96
                        +INVENTORY_TRANSFER: 97, // 97
                        +INVOICE: 98, // 98
                        +ISSUE: 99, // 99
                        +ITEM: 100, // 100
                        +ITEM_ACCOUNT_MAPPING: 101, // 101
                        +ITEM_BIN_NUMBER: 102, // 102
                        +ITEM_DEMAND_PLAN: 103, // 103
                        +ITEM_FULFILLMENT: 104, // 104
                        +ITEM_GROUP: 105, // 105
                        +ITEM_RECEIPT: 106, // 106
                        +ITEM_REVISION: 107, // 107
                        +ITEM_SUPPLY_PLAN: 108, // 108
                        +JOB: 109, // 109
                        +JOB_STATUS: 110, // 110
                        +JOB_TYPE: 111, // 111
                        +JOURNAL_ENTRY: 112, // 112
                        +KIT_ITEM: 113, // 113
                        +LABOR_BASED_PROJECT_REVENUE_RULE: 114, // 114
                        +LEAD: 115, // 115
                        +LOCATION: 116, // 116
                        +LOT_NUMBERED_ASSEMBLY_ITEM: 117, // 117
                        +LOT_NUMBERED_INVENTORY_ITEM: 118, // 118
                        +MANUFACTURING_COST_TEMPLATE: 119, // 119
                        +MANUFACTURING_OPERATION_TASK: 120, // 120
                        +MANUFACTURING_ROUTING: 121, // 121
                        +MAP_REDUCE_SCRIPT: 122, // 122
                        +MARKUP_ITEM: 123, // 123
                        +MASSUPDATE_SCRIPT: 124, // 124
                        +MERCHANDISE_HIERARCHY_LEVEL: 125, // 125
                        +MERCHANDISE_HIERARCHY_NODE: 126, // 126
                        +MERCHANDISE_HIERARCHY_VERSION: 127, // 127
                        +MESSAGE: 128, // 128
                        +MFG_PLANNED_TIME: 129, // 129
                        +NEXUS: 130, // 130
                        +NON_INVENTORY_ITEM: 131, // 131
                        +NOTE: 132, // 132
                        +NOTE_TYPE: 133, // 133
                        +OPPORTUNITY: 134, // 134
                        +OTHER_CHARGE_ITEM: 135, // 135
                        +OTHER_NAME: 136, // 136
                        +OTHER_NAME_CATEGORY: 137, // 137
                        +PARTNER: 138, // 138
                        +PARTNER_CATEGORY: 139, // 139
                        +PAYCHECK: 140, // 140
                        +PAYCHECK_JOURNAL: 141, // 141
                        +PAYMENT_EVENT: 142, // 142
                        +PAYMENT_ITEM: 143, // 143
                        +PAYMENT_METHOD: 144, // 144
                        +PAYROLL_ITEM: 145, // 145
                        +PCT_COMPLETE_PROJECT_REVENUE_RULE: 146, // 146
                        +PERIOD_END_JOURNAL: 147, // 147
                        +PERMISSION: 148, // 148
                        +PHONE_CALL: 149, // 149
                        +PORTLET: 150, // 150
                        +PRICE_BOOK: 151, // 151
                        +PRICE_LEVEL: 152, // 152
                        +PRICING_GROUP: 153, // 153
                        +PROJECT_EXPENSE_TYPE: 154, // 154
                        +PROJECT_TASK: 155, // 155
                        +PROJECT_TEMPLATE: 156, // 156
                        +PROMOTION_CODE: 157, // 157
                        +PROSPECT: 158, // 158
                        +PURCHASE_CONTRACT: 159, // 159
                        +PURCHASE_ORDER: 160, // 160
                        +PURCHASE_REQUISITION: 161, // 161
                        +RECENT_RECORD: 162, // 162
                        +RES_ALLOCATION_TIME_OFF_CONFLICT: 163, // 163
                        +RESOURCE_ALLOCATION: 164, // 164
                        +RESTLET: 165, // 165
                        +RETURN_AUTHORIZATION: 166, // 166
                        +REVENUE_ARRANGEMENT: 167, // 167
                        +REVENUE_COMMITMENT: 168, // 168
                        +REVENUE_COMMITMENT_REVERSAL: 169, // 169
                        +REVENUE_PLAN: 170, // 170
                        +REV_REC_SCHEDULE: 171, // 171
                        +REV_REC_TEMPLATE: 172, // 172
                        +ROLE: 173, // 173
                        +SALES_ORDER: 174, // 174
                        +SALES_ROLE: 175, // 175
                        +SALES_TAX_ITEM: 176, // 176
                        +SAVED_SEARCH: 177, // 177
                        +SCHEDULED_SCRIPT: 178, // 178
                        +SCHEDULED_SCRIPT_INSTANCE: 179, // 179
                        +SCRIPT_DEPLOYMENT: 180, // 180
                        +SERIALIZED_ASSEMBLY_ITEM: 181, // 181
                        +SERIALIZED_INVENTORY_ITEM: 182, // 182
                        +SERVICE_ITEM: 183, // 183
                        +SHIP_ITEM: 184, // 184
                        +SOLUTION: 185, // 185
                        +STATISTICAL_JOURNAL_ENTRY: 186, // 186
                        +STORE_PICKUP_FULFILLMENT: 187, // 187
                        +SUBSCRIPTION: 188, // 188
                        +SUBSCRIPTION_CHANGE_ORDER: 189, // 189
                        +SUBSCRIPTION_LINE: 190, // 190
                        +SUBSCRIPTION_PLAN: 191, // 191
                        +SUBSCRIPTION_RENEWAL_HISTORY: 192, // 192
                        +SUBSIDIARY: 193, // 193
                        +SUBTOTAL_ITEM: 194, // 194
                        +SUITELET: 195, // 195
                        +SUITE_SCRIPT_DETAIL: 196, // 196
                        +SUPPLY_CHAIN_SNAPSHOT: 197, // 197
                        +SUPPORT_CASE: 198, // 198
                        +SYSTEM_NOTE: 199, // 199
                        +TASK: 200, // 200
                        +TAX_DETAIL: 201, // 201
                        +TAX_GROUP: 202, // 202
                        +TAX_PERIOD: 203, // 203
                        +TAX_TYPE: 204, // 204
                        +TERM: 205, // 205
                        +TIME_APPROVAL: 206, // 206
                        +TIME_BILL: 207, // 207
                        +TIME_OFF_CHANGE: 208, // 208
                        +TIME_OFF_PLAN: 209, // 209
                        +TIME_OFF_REQUEST: 210, // 210
                        +TIME_OFF_RULE: 211, // 211
                        +TIME_OFF_TYPE: 212, // 212
                        +TOPIC: 213, // 213
                        +TRANSACTION: 214, // 214
                        +TRANSFER_ORDER: 215, // 215
                        +UBER: 216, // 216
                        +UNITS_TYPE: 217, // 217
                        +USAGE: 218, // 218
                        +USEREVENT_SCRIPT: 219, // 219
                        +VENDOR: 220, // 220
                        +VENDOR_BILL: 221, // 221
                        +VENDOR_CATEGORY: 222, // 222
                        +VENDOR_CREDIT: 223, // 223
                        +VENDOR_PAYMENT: 224, // 224
                        +VENDOR_RETURN_AUTHORIZATION: 225, // 225
                        +WEBSITE: 226, // 226
                        +WORKFLOW_ACTION_SCRIPT: 227, // 227
                        +WORK_ORDER: 228, // 228
                        +WORK_ORDER_CLOSE: 229, // 229
                        +WORK_ORDER_COMPLETION: 230, // 230
                        +WORK_ORDER_ISSUE: 231, // 231
                        +WORKPLACE: 232 // 232
                        |};

  declare type OperatorT = {|
                            +AFTER: 0, // 0
                            +ALLOF: 1, // 1
                            +ANY: 2, // 2
                            +ANYOF: 3, // 3
                            +BEFORE: 4, // 4
                            +BETWEEN: 5, // 5
                            +CONTAINS: 6, // 6
                            +DOESNOTCONTAIN: 7, // 7
                            +DOESNOTSTARTWITH: 8, // 8
                            +EQUALTO: 9, // 9
                            +GREATERTHAN: 10, // 10
                            +GREATERTHANOREQUALTO: 11, // 11
                            +HASKEYWORDS: 12, // 12
                            +IS: 13, // 13
                            +ISEMPTY: 14, // 14
                            +ISNOT: 15, // 15
                            +ISNOTEMPTY: 16, // 16
                            +LESSTHAN: 17, // 17
                            +LESSTHANOREQUALTO: 18, // 18
                            +NONEOF: 19, // 19
                            +NOTAFTER: 20, // 20
                            +NOTALLOF: 21, // 21
                            +NOTBEFORE: 22, // 22
                            +NOTBETWEEN: 23, // 23
                            +NOTEQUALTO: 24, // 24
                            +NOTGREATERTHAN: 25, // 25
                            +NOTGREATERTHANOREQUALTO: 26, // 26
                            +NOTLESSTHAN: 27, // 27
                            +NOTLESSTHANOREQUALTO: 28, // 28
                            +NOTON: 29, // 29
                            +NOTONORAFTER: 30, // 30
                            +NOTONORBEFORE: 31, // 31
                            +NOTWITHIN: 32, // 32
                            +ON: 33, // 33
                            +ONORAFTER: 34, // 34
                            +ONORBEFORE: 35, // 35
                            +STARTSWITH: 36, // 36
                            +WITHIN: 37 // 37
                            |};

  declare type SummaryT = {|
                           +GROUP: 0, // 0
                           +COUNT: 1, // 1
                           +SUM: 2, // 2
                           +AVG: 3, // 3
                           +MIN: 4, // 4
                           +MAX: 5 // 5
                           |};

  declare type SortT = {|
                        +ASC: 0, // 0
                        +DESC: 1, // 1
                        +NONE: 2 // 2
                        |};

  declare export interface NSearch {

    /**
     * Creates a new search and returns it as a search.Search object. The search can be modified and run as an on demand
     * search with Search.run(), without saving it. Alternatively, calling Search.save() will save the search to the
     * database, so it can be reused later in the UI or loaded with search.load(options).
     *
     * Note: This method is agnostic in terms of its options.filters argument. It can accept input of a single search.Filter
     * object, an array of search.Filter objects, or a search filter expression. The search.create(options) method also
     * includes a promise version, search.create.promise(options).
     *
     * Important: When you use this method to create a search, consider the following:
     *
     *   * When you define the search, make sure you sort using the field with the most unique values, or sort using multiple
     *     fields. Sorting with a single field that has multiple identical values can cause the result rows to be in a
     *     different order each time the search is run.
     *
     *   * You cannot directly create a filter or column for a list/record type field in SuiteScript by passing in its text
     *     value. You must use the field’s internal ID. If you must use the field’s text value, you can create a filter or
     *     column with a formula using name: 'formulatext'.
     */
    create: SearchCreateFunction;
    load: SearchLoadFunction;
    delete: SearchDeleteFunction;
    duplicates: SearchDuplicatesFunction;
    /**
     * Performs a global search against a single keyword or multiple keywords.
     * Similar to the global search functionality in the UI, you can programmatically filter the global
     * search results that are returned. For example, you can use the following filter to limit the
     * returned records to Customer records: `'cu: simpson'`
     * @returns search.Result[] as an array of result objects containing these columns: name, type, info1, and info2
     * Results are limited to 1000 records. If there are no search results, this method returns null.
     */
    global: SearchGlobalFunction;
    /**
     * Performs a search for one or more body fields on a record. You can use joined-field lookups with this method, with
     * the following syntax: join_id.field_name The search.lookupFields(options) method also includes a promise version,
     * search.lookupFields.promise(options).
     *
     * Note that the return contains either an object or a scalar value, depending on whether the looked-up field holds a
     * single value, or a collection of values. Single select fields are returned as an object with value and text
     * properties. Multi-select fields are returned as an object with value: text pairs.
     *
     * In the following example, a select field like my_select would return an array of objects containing a value and text
     * property. This select field contains multiple entries to select from, so each entry would have a numerical id (the
     * value) and a text display (the text). For "internalid" in this particular code snippet, the sample returns 1234. The
     * internal id of a record is a single value, so a scalar is returned:
     * ```
     * {
     * internalid: 1234,
     * firstname: 'Joe',
     * my_select: [{value: 1, text: 'US Sub'}],
     * my_multiselect: [{"value": "1,2", "text": "US Sub, EU Sub" }]
     * }
     * ```
     * @returns Returns select fields as an object with value and text properties. Returns multiselect fields as an
     * array of object with value:text pairs.
     */
    lookupFields: SearchLookupFieldsFunction;
    createColumn(options: CreateSearchColumnOptions): Column;

    /**
     * Creates a new search filter as a search.Filter object.
     *
     * Important: You cannot directly create a filter or column for a list/record type field in SuiteScript by passing
     * in its text value. You must use the field’s internal ID. If you must use the field’s text value, you can create
     * a filter or column with a formula using name: 'formulatext'.
     */
    createFilter(options: CreateSearchFilterOptions): Filter;

    Type: TypeT;
    Operator: OperatorT;
    Summary: SummaryT;
    Sort: SortT;
  }

}
