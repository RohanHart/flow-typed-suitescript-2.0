/**
 * Flowtype definitions for runtime
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 * @flow
 */

declare module 'N/runtime' {

  declare interface GetParameterOptions {
    /**
     * The name of the script parameter.
     */
    name: string;
  }
  declare interface SetOptions {
    /**
     * Key used to store the runtime.Session.
     */
    name: string;

    /**
     * Value to associate with the key in the user session.
     */
    value: string;
  }
  /**
   * Encapsulates the runtime settings of the currently executing script.
   */
  declare interface Script {
    /**
     * Returns the value of a script parameter for the currently executing script.
     */
    getParameter(
      options: GetParameterOptions
    ): boolean | number | Date | string | string[];

    /**
     * Returns a number value for the usage units remaining for the currently executing script.
     */
    getRemainingUsage(): number;

    /**
     * The deployment ID for the script deployment on the currently executing script.
     */
    deploymentId: string;

    /**
     * The script ID for the currently executing script.
     */
    id: string;

    /**
     * The script logging level for the current script execution. This method is not supported on client scripts.
     */
    logLevel: string;

    /**
     * The percent complete specified for the current scheduled script execution. The return value will appear in the % Complete column in the Scheduled Script Status page.
     */
    percentComplete: number;

    /**
     * An Array of bundle IDs for the bundles that include the currently executing script.
     */
    bundleIds: string[];
  }
  /**
   * Encapsulates the user session for the currently executing script.
   */
  declare interface Session {
    /**
     * Returns the user-defined session object value associated with the session object key.
     */
    get(options: GetParameterOptions): string;

    /**
     * Sets a key and value for a user-defined runtime.Session.
     */
    set(options: SetOptions): void;
  }
  /**
   * Encapsulates the properties and preferences for the user of the currently executing script.
   */
  declare interface User {
    /**
     * Returns a user permission level for the specified permission as a runtime.Permission enumeration.
     */
    getPermission(options: GetParameterOptions): $Values<typeof Permission>;

    /**
     * Returns the value of a NetSuite preference.
     */
    getPreference(options: GetParameterOptions): string;

    /**
     * The internal ID of the department for the currently logged-in user.
     */
    department: number;

    /**
     * The email address of the currently logged-in user.
     */
    email: string;

    /**
     * The internal ID of the currently logged-in user.
     */
    id: number;

    /**
     * The internal ID of the location of the currently logged-in user.
     */
    location: number;

    /**
     * The name of the currently logged-in user.
     */
    name: string;

    /**
     * The internal ID of the role for the currently logged-in user.
     */
    role: number;

    /**
     * The script ID of the center type, or role center, for the currently logged-in user.
     * NOTE: The actual behavior of this strays from the documentation. This in practice returns the script id
     * of the role center as opposed to its internal id. That is why the return type is string | number instead of
     * what the documentation claims (just number).
     */
    roleCenter: string | number;

    /**
     * The custom scriptId of the role for the currently logged-in user.
     */
    roleId: string;

    /**
     * The internal ID of the subsidiary for the currently logged-in user.
     */
    subsidiary: number;
  }
  declare interface FeatureOptions {
    /**
     * The internal ID of the feature to check.
     */
    feature: string;
  }

  /**
   * Enumeration that holds the context information about what triggered the current script. Returned by the runtime.executionContext property of the N/runtime Module.
   */

  declare type ContextTypeT = {|
                               +ACTION: 0, // 0
                               +BUNDLE_INSTALLATION: 1, // 1
                               +CLIENT: 2, // 2
                               +CONSOLRATEADJUSTOR: 3, // 3
                               +CSV_IMPORT: 4, // 4
                               +CUSTOMGLLINES: 5, // 5
                               +CUSTOM_MASSUPDATE: 6, // 6
                               +DEBUGGER: 7, // 7
                               +EMAIL_CAPTURE: 8, // 8
                               +MAP_REDUCE: 9, // 9
                               +PAYMENTGATEWAY: 10, // 10
                               +PORTLET: 11, // 11
                               +PROMOTIONS: 12, // 12
                               +RESTLET: 13, // 13
                               +SCHEDULED: 14, // 14
                               +SHIPPING_PARTNERS: 15, // 15
                               +SUITELET: 16, // 16
                               +TAX_CALCULATION: 17, // 17
                               +USEREVENT: 18, // 18
                               +USER_INTERFACE: 19, // 19
                               +WEBAPPLICATION: 20, // 20
                               +WEBSERVICES: 21, // 21
                               +WEBSTORE: 22, // 22
                               +WORKFLOW: 23 // 23
                               |};

  /**
   * Enumeration that holds all possible environment types that the current script can execute in.
   */

  declare type EnvTypeT = {|
                           +SANDBOX: 0, // 0
                           +PRODUCTION: 1, // 1
                           +BETA: 2, // 2
                           +INTERNAL: 3 // 3
                           |};

  /**
   * Enumeration that holds the user permission level for a specific permission ID. Returned by the User.getPermission(options) method.
   */

  declare type PermissionT = {|
                              +FULL: 0, // 0
                              +EDIT: 1, // 1
                              +CREATE: 2, // 2
                              +VIEW: 3, // 3
                              +NONE: 4 // 4
                              |};

  declare export interface NRuntime {

    /**
     * The NetSuite account ID for the currently logged-in user.
     */
    accountId: string;
    /**
     * The current environment in which the script is executing. This property returns one of the values from the runtime.EnvType enumeration.
     */
    envType: $Values<typeof EnvType>;
    /**
     * Returns a runtime.ContextType enumeration that represents what triggered the current script.
     */
    executionContext: $Values<typeof ContextType>;
    /**
     * The number of processors available to the currently logged in account.
     * SuiteCloud Processors is the current system used to execute (process) scheduled scripts and map/reduce scripts. This property is helpful if you are a SuiteApp developer and your script needs to know the total number of processors available to a deployment.
     * For scheduled script deployments that continue to use queues, use runtime.queueCount. With the introduction of SuiteCloud Processors, map/reduce script deployments and new scheduled script deployments no longer use queues, but pre-existing scheduled script deployments continue to use queues until the queues are removed (see SuiteCloud Processors â€“ Supported Task Types).
     * Be aware that the number of processors available may not be the same as the number of queues available. For more information, see SuiteCloud Plus Settings.
     */
    processorCount: number;
    /**
     * Returns the number of scheduled script queues in a given account.
     */
    queueCount: number;
    /**
     * Returns the version of NetSuite that the method is called in. For example, the  runtime.version property in an account running NetSuite 2015.2 is 2015.2.
     */
    version: string;

    /**
     * Returns a runtime.Script that represents the currently executing script.
     */
    getCurrentScript(): Script;

    /**
     * Returns a runtime.Session that represents the user session for the currently executing script.
     */
    getCurrentSession(): Session;

    /**
     * Returns a runtime.User that represents the properties and preferences for the user of the currently executing script.
     */
    getCurrentUser(): User;

    /**
     * Use this method to determine if a particular feature is enabled in a NetSuite account. These are the features that appear on the Enable Features page at Setup > Company > Setup Tasks > Enable Features.
     */
    isFeatureInEffect(options: FeatureOptions): boolean;

    ContextType: ContextTypeT;
    EnvType: EnvTypeT;
    Permission: PermissionT;
  }

}
