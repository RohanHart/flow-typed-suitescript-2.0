/**
 * Flowtype definitions for task
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.2.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */
/* @flow */

import type {File} from 'N/file';

declare module "N/task" {

declare export var DedupeEntityType: {
    CUSTOMER: "CUSTOMER",
    CONTACT: "CONTACT",
    VENDOR: "VENDOR",
    PARTNER: "PARTNER",
    LEAD: "LEAD",
    PROSPECT: "PROSPECT",
}

declare export type DedupeEntityTypeT = $Values<typeof DedupeEntityType>

declare export var DedupeMode: {
    MERGE: "MERGE",
    DELETE: "DELETE",
    MAKE_MASTER_PARENT: "MAKE_MASTER_PARENT",
    MARK_AS_NOT_DUPES: "MARK_AS_NOT_DUPES",
}

declare export type DedupeModeT = $Values<typeof DedupeMode>

declare export var MapReduceStage: {
    GET_INPUT: "GET_INPUT",
    MAP: "MAP",
    SHUFFLE: "SHUFFLE",
    REDUCE: "REDUCE",
    SUMMARIZE: "SUMMARIZE",
}

declare export type MapReduceStageT = $Values<typeof MapReduceStage>

declare export var MasterSelectionMode: {
    CREATED_EARLIEST: "CREATED_EARLIEST",
    MOST_RECENT_ACTIVITY: "MOST_RECENT_ACTIVITY",
    MOST_POPULATED_FIELDS: "MOST_POPULATED_FIELDS",
    SELECT_BY_ID: "SELECT_BY_ID",
}

declare export type MasterSelectionModeT = $Values<typeof MasterSelectionMode>

declare export var TaskStatus: {
    PENDING: "PENDING",
    PROCESSING: "PROCESSING",
    COMPLETE: "COMPLETE",
    FAILED: "FAILED",
}

declare export type TaskStatusT = $Values<typeof TaskStatus>

declare export var TaskType: {
    SCHEDULED_SCRIPT: "SCHEDULED_SCRIPT",
    MAP_REDUCE: "MAP_REDUCE",
    CSV_IMPORT: "CSV_IMPORT",
    ENTITY_DEDUPLICATION: "ENTITY_DEDUPLICATION",
    WORKFLOW_TRIGGER: "WORKFLOW_TRIGGER",
}
declare export type TaskTypeT = $Values<typeof TaskType>

declare interface CheckStatusOptions {
    taskId: string
}
declare type TaskCreateOptions = CsvImportTaskCreateOptions |
    EntityDeduplicationTaskCreateOptions |
    MapReduceScriptTaskCreateOptions |
    ScheduledScriptTaskCreateOptions |
    WorkflowTriggerTaskCreateOptions;
declare interface CsvImportTaskCreateOptions {
    taskType: typeof TaskType.CSV_IMPORT,
        importFile?: File | string,
        linkedFiles?: {
            [key: string]: any
        },
        mappingId?: number | string,
        name?: string,
        queueId?: number
}
declare interface CsvImportTask {
    submit(): string,
        toString(): string,
        importFile: File | string,
        linkedFiles: any,
        mappingId: number | string,
        name: string,
        queueId: number
}
declare interface CsvImportTaskStatus {
    toString(): string,
        status: TaskStatusT
}
declare interface EntityDeduplicationTaskCreateOptions {
    taskType: typeof TaskType.ENTITY_DEDUPLICATION,
        dedupeMode?: DedupeModeT,
        entityType?: string,
        masterRecordId?: string | number,
        masterSelectionMode?: MasterSelectionModeT,
        recordIds?: number[]
}
declare interface EntityDeduplicationTask {
    submit(): string,
        toString(): string,
        dedupeMode: DedupeModeT,
        entityType: string,
        masterRecordId: number | string,
        masterSelectionMode: MasterSelectionModeT,
        recordIds: number[]
}
declare interface EntityDeduplicationTaskStatus {
    toString(): string,
        status: TaskStatusT
}
declare export interface MapReduceScriptTaskCreateOptions {
    taskType: typeof TaskType.MAP_REDUCE,
        scriptId?: string,
        deploymentId?: string,
        params?: any
}
declare interface MapReduceScriptTask {
    submit(): string,
        toString(): string,
        scriptId: string,
        deploymentId: string,
        params: any
}
declare interface MapReduceScriptTaskStatus {
    getCurrentTotalSize(): number,
        getPendingMapCount(): number,
        getPendingMapSize(): number,
        getPendingOutputCount(): number,
        getPendingOutputSize(): number,
        getPendingReduceCount(): number,
        getPendingReduceSize(): number,
        getPercentageCompleted(): number,
        getTotalMapCount(): number,
        getTotalOutputCount(): number,
        toString(): string,
        scriptId: string,
        deploymentId: string,
        stage: MapReduceStageT,
        status: TaskStatusT
}
declare interface ScheduledScriptTaskCreateOptions {
    taskType: typeof TaskType.SCHEDULED_SCRIPT,
        scriptId?: string,
        deploymentId?: string,
        params?: any
}
declare interface ScheduledScriptTask {
    submit(): string,
        toString(): string,
        scriptId: string,
        deploymentId: string,
        params: any
}
declare interface ScheduledScriptTaskStatus {
    toString(): string,
        scriptId: string,
        deploymentId: string,
        status: TaskStatusT
}
declare interface WorkflowTriggerTaskCreateOptions {
    taskType: typeof TaskType.WORKFLOW_TRIGGER,
        params?: any,
        recordId?: number | string,
        recordType?: string,
        workflowId?: number | string
}
declare interface WorkflowTriggerTask {
    submit(): string,
        toString(): string,
        params: any,
        recordId: number | string,
        recordType: string,
        workflowId: number | string
}
declare interface WorkflowTriggerTaskStatus {
    toString(): string,
        status: TaskStatusT
}
declare export function create(options: CsvImportTaskCreateOptions):  CsvImportTask;
declare export function create(options: EntityDeduplicationTaskCreateOptions): EntityDeduplicationTask;
declare export function create(options: MapReduceScriptTaskCreateOptions): MapReduceScriptTask;
declare export function create(options: ScheduledScriptTaskCreateOptions): ScheduledScriptTask;
declare export function create(options: WorkflowTriggerTaskCreateOptions): WorkflowTriggerTask;

declare export function checkStatus(
    options: CheckStatusOptions): ScheduledScriptTaskStatus
    |
    MapReduceScriptTaskStatus |
    CsvImportTaskStatus |
    EntityDeduplicationTaskStatus |
    WorkflowTriggerTaskStatus

}
