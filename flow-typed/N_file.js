/**
 * Flowtype definitions for file
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.2.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module "N/file" {

/**
 * Enumeration that holds the string values for supported character encoding.
 */
declare export var Encoding: {
    UTF8: "UTF8",
    WINDOWS_1252: "WINDOWS_1252",
    ISO_8859_1: "ISO_8859_1",
    GB18030: "GB18030",
    SHIFT_JIS: "SHIFT_JIS",
    MAC_ROMAN: "MAC_ROMAN",
    GB2312: "GB2312",
    BIG5: "BIG5",
}

declare type EncodingT = $Values<typeof Encoding>

/**
* Enumeration that holds the string values for supported file types.
 */
declare export var Type: {
    AUTOCAD: "AUTOCAD",
    BMPIMAGE: "BMPIMAGE",
    CSV: "CSV",
    EXCEL: "EXCEL",
    FLASH: "FLASH",
    FREEMARKER: "FREEMARKER",
    GIFIMAGE: "GIFIMAGE",
    GZIP: "GZIP",
    HTMLDOC: "HTMLDOC",
    ICON: "ICON",
    JAVASCRIPT: "JAVASCRIPT",
    JPGIMAGE: "JPGIMAGE",
    JSON: "JSON",
    MESSAGERFC: "MESSAGERFC",
    MP3: "MP3",
    MPEGMOVIE: "MPEGMOVIE",
    MSPROJECT: "MSPROJECT",
    PDF: "PDF",
    PJPGIMAGE: "PJPGIMAGE",
    PLAINTEXT: "PLAINTEXT",
    PNGIMAGE: "PNGIMAGE",
    POSTSCRIPT: "POSTSCRIPT",
    POWERPOINT: "POWERPOINT",
    QUICKTIME: "QUICKTIME",
    RTF: "RTF",
    SMS: "SMS",
    STYLESHEET: "STYLESHEET",
    TAR: "TAR",
    TIFFIMAGE: "TIFFIMAGE",
    VISIO: "VISIO",
    WEBAPPPAGE: "WEBAPPPAGE",
    WEBAPPSCRIPT: "WEBAPPSCRIPT",
    WORD: "WORD",
    XMLDOC: "XMLDOC",
    XSD: "XSD",
    ZIP: "ZIP",
}

declare type TypeT = $Values<typeof Type>

declare export interface File {
    description: string,
        encoding: string,
        fileType: TypeT,
        folder: number,
        id: number,
        isInactive: boolean,
        isOnline: boolean,
        isText: boolean,
        name: string,
        path: string,
        size: string,
        url: string,
        save: () => number,
        getContents: () => string,
        resetStream: () => void,
        appendLine: (option: FileAppendLineOptions) => File,
        lines: {
            iterator: () => FileIterator
        }
}
declare interface FileIterator {
    each: (options: any) => boolean
}
declare interface FileAppendLineOptions {

    /**
     * Internal ID of the file as a number or a string, or the relative file path to the file in the file cabinet.
     */
    value: string
}
declare interface FileLoadOptions {

    /**
     * Internal ID of the file as a number or a string, or the relative file path to the file in the file cabinet.
     */
    id: (number | string)
}
declare interface FileDeleteOptions {

    /**
     * Internal ID of the file.
     */
    id: (number | string)
}
declare interface FileCreateOptions {

    /**
     * The file name.
     */
    name: string,

        /**
         * The file type.
         */
        fileType: TypeT,

        /**
         * The file content.
         */
        contents?: string,

        /**
         * The file content.
         */
        description?: string,

        /**
         * The internal ID of the folder used when the file is saved.
         */
        folder?: number,

        /**
         * The file encoding.
         */
        encoding?: EncodingT,

        /**
         * The file status.
         */
        isInactive?: boolean,

        /**
         * The file status.
         */
        isOnline?: boolean
}
/**
 * Method used to create a new file in the NetSuite file cabinet.
 */
declare export function create(options: FileCreateOptions): File
/**
 * Method used to delete an existing file from the NetSuite file cabinet.
 */
declare function deleteFunc(options: FileDeleteOptions): void
/**
 * Method used to load an existing file from the NetSuite file cabinet.
 */
declare export function load(options: FileLoadOptions): File

}
