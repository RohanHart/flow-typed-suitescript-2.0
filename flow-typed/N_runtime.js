/**
 * Flowtype definitions for runtime
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.2.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module "N/runtime" {

/** Enumeration that holds the context information about what triggered the current script. Returned by the runtime.executionContext property of the N/runtime Module. */
declare export var ContextType: {
    USER_INTERFACE: "USER_INTERFACE",
    WEBSERVICES: "WEBSERVICES",
    WEBSTORE: "WEBSTORE",
    PORTLET: "PORTLET",
    SCHEDULED: "SCHEDULED",
    SUITELET: "SUITELET",
    CSV_IMPORT: "CSV_IMPORT",
    CUSTOM_MASSUPDATE: "CUSTOM_MASSUPDATE",
    WORKFLOW: "WORKFLOW",
    USEREVENT: "USEREVENT",
}

declare export type ContextTypeT = $Values<typeof ContextType>

/** Enumeration that holds all possible environment types that the current script can execute in. */
declare export var EnvType: {
    SANDBOX: "SANDBOX",
    PRODUCTION: "PRODUCTION",
    BETA: "BETA",
    INTERNAL: "INTERNAL",
}

declare export type EnvTypeT = $Values<typeof EnvType>

/** Enumeration that holds the user permission level for a specific permission ID. Returned by the User.getPermission(options) method. */
declare export var Permission: {
    FULL: "FULL",
    EDIT: "EDIT",
    CREATE: "CREATE",
    VIEW: "VIEW",
    NONE: "NONE",
}

declare export type PermissionT = $Values<typeof Permission>

declare interface GetParameterOptions {

    /**
     * The name of the script parameter. 
     */
    name: string
}
declare interface SetOptions {

    /**
     * Key used to store the runtime.Session. 
     */
    name: string,

        /**
         * Value to associate with the key in the user session. 
         */
        value: string
}
/**
 * Encapsulates the runtime settings of the currently executing script. 
 */
declare interface Script {

    /**
     * Returns the value of a script parameter for the currently executing script. 
     */
  getParameter<T: boolean | number | Date | string | string[]>(options: GetParameterOptions): T,

        /**
         * Returns a number value for the usage units remaining for the currently executing script. 
         */
        getRemainingUsage(): number,

        /**
         * The deployment ID for the script deployment on the currently executing script. 
         */
        deploymentId: string,

        /**
         * The script ID for the currently executing script. 
         */
        id: string,

        /**
         * The script logging level for the current script execution. This method is not supported on client scripts. 
         */
        logLevel: string,

        /**
         * The percent complete specified for the current scheduled script execution. The return value will appear in the % Complete column in the Scheduled Script Status page. 
         */
        percentComplete: number,

        /**
         * An Array of bundle IDs for the bundles that include the currently executing script. 
         */
        bundleIds: string[]
}
/**
 * Encapsulates the user session for the currently executing script. 
 */
declare interface Session {

    /**
     * Returns the user-defined session object value associated with the session object key. 
     */
    get(options: GetParameterOptions): string,

        /**
         * Sets a key and value for a user-defined runtime.Session. 
         */
        set(options: SetOptions): void
}
/**
 * Encapsulates the properties and preferences for the user of the currently executing script. 
 */
declare interface User {

    /**
     * Returns a user permission level for the specified permission as a runtime.Permission enumeration. 
     */
    getPermission(options: GetParameterOptions): PermissionT,

        /**
         * Returns the value of a NetSuite preference. 
         */
        getPreference(options: GetParameterOptions): string,

        /**
         * The internal ID of the department for the currently logged-in user. 
         */
        department: number,

        /**
         * The email address of the currently logged-in user. 
         */
        email: string,

        /**
         * The internal ID of the currently logged-in user. 
         */
        id: number,

        /**
         * The internal ID of the location of the currently logged-in user. 
         */
        location: number,

        /**
         * The name of the currently logged-in user. 
         */
        name: string,

        /**
         * The internal ID of the role for the currently logged-in user. 
         */
        role: number,

        /**
         * The script ID of the center type, or role center, for the currently logged-in user.
         * NOTE: The actual behavior of this strays from the documentation. This in practice returns the script id
        of the role center as opposed to its internal id. That is why the return type is string | number instead of
        what the documentation claims (just number).
        */
        roleCenter: string | number,

        /**
         * The custom scriptId of the role for the currently logged-in user. 
         */
        roleId: string,

        /**
         * The internal ID of the subsidiary for the currently logged-in user. 
         */
        subsidiary: number
}
declare interface FeatureOptions {

    /**
     * The internal ID of the feature to check. 
     */
    feature: string
}
declare export var accountId: string;
declare export var envType: EnvTypeT;
declare export var executionContext: ContextTypeT;
declare export var queueCount: number;
declare export var version: string;
/**
 * Returns a runtime.Script that represents the currently executing script. 
 */
declare export function getCurrentScript(): Script
/**
 * Returns a runtime.Session that represents the user session for the currently executing script. 
 */
declare export function getCurrentSession(): Session
/**
 * Returns a runtime.User that represents the properties and preferences for the user of the currently executing script. 
 */
declare export function getCurrentUser(): User
/**
 * Use this method to determine if a particular feature is enabled in a NetSuite account. These are the features that appear on the Enable Features page at Setup>Company>Setup Tasks>Enable Features. 
 */
declare export function isFeatureInEffect(options: FeatureOptions): boolean

}
